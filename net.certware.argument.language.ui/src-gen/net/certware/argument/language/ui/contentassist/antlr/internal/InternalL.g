/*
* generated by Xtext
*/
grammar InternalL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package net.certware.argument.language.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package net.certware.argument.language.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import net.certware.argument.language.services.LGrammarAccess;

}

@parser::members {
 
 	private LGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getStatementsAssignment()); }
(rule__Program__StatementsAssignment)*
{ after(grammarAccess.getProgramAccess().getStatementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicTerm
entryRuleBasicTerm 
:
{ before(grammarAccess.getBasicTermRule()); }
	 ruleBasicTerm
{ after(grammarAccess.getBasicTermRule()); } 
	 EOF 
;

// Rule BasicTerm
ruleBasicTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicTermAccess().getAlternatives()); }
(rule__BasicTerm__Alternatives)
{ after(grammarAccess.getBasicTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getIdentifierAssignment()); }
(rule__Variable__IdentifierAssignment)
{ after(grammarAccess.getVariableAccess().getIdentifierAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypedVariable
entryRuleTypedVariable 
:
{ before(grammarAccess.getTypedVariableRule()); }
	 ruleTypedVariable
{ after(grammarAccess.getTypedVariableRule()); } 
	 EOF 
;

// Rule TypedVariable
ruleTypedVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypedVariableAccess().getGroup()); }
(rule__TypedVariable__Group__0)
{ after(grammarAccess.getTypedVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArithmeticTerm
entryRuleArithmeticTerm 
:
{ before(grammarAccess.getArithmeticTermRule()); }
	 ruleArithmeticTerm
{ after(grammarAccess.getArithmeticTermRule()); } 
	 EOF 
;

// Rule ArithmeticTerm
ruleArithmeticTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArithmeticTermAccess().getAdditionParserRuleCall()); }
	ruleAddition
{ after(grammarAccess.getArithmeticTermAccess().getAdditionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddition
entryRuleAddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimary
entryRulePrimary 
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArithmeticLiteral
entryRuleArithmeticLiteral 
:
{ before(grammarAccess.getArithmeticLiteralRule()); }
	 ruleArithmeticLiteral
{ after(grammarAccess.getArithmeticLiteralRule()); } 
	 EOF 
;

// Rule ArithmeticLiteral
ruleArithmeticLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArithmeticLiteralAccess().getAlternatives()); }
(rule__ArithmeticLiteral__Alternatives)
{ after(grammarAccess.getArithmeticLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionalTerm
entryRuleFunctionalTerm 
:
{ before(grammarAccess.getFunctionalTermRule()); }
	 ruleFunctionalTerm
{ after(grammarAccess.getFunctionalTermRule()); } 
	 EOF 
;

// Rule FunctionalTerm
ruleFunctionalTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionalTermAccess().getGroup()); }
(rule__FunctionalTerm__Group__0)
{ after(grammarAccess.getFunctionalTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicTerms
entryRuleBasicTerms 
:
{ before(grammarAccess.getBasicTermsRule()); }
	 ruleBasicTerms
{ after(grammarAccess.getBasicTermsRule()); } 
	 EOF 
;

// Rule BasicTerms
ruleBasicTerms
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicTermsAccess().getGroup()); }
(rule__BasicTerms__Group__0)
{ after(grammarAccess.getBasicTermsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantDeclaration
entryRuleConstantDeclaration 
:
{ before(grammarAccess.getConstantDeclarationRule()); }
	 ruleConstantDeclaration
{ after(grammarAccess.getConstantDeclarationRule()); } 
	 EOF 
;

// Rule ConstantDeclaration
ruleConstantDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantDeclarationAccess().getGroup()); }
(rule__ConstantDeclaration__Group__0)
{ after(grammarAccess.getConstantDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration 
:
{ before(grammarAccess.getTypeDeclarationRule()); }
	 ruleTypeDeclaration
{ after(grammarAccess.getTypeDeclarationRule()); } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeDeclarationAccess().getGroup()); }
(rule__TypeDeclaration__Group__0)
{ after(grammarAccess.getTypeDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLimit
entryRuleLimit 
:
{ before(grammarAccess.getLimitRule()); }
	 ruleLimit
{ after(grammarAccess.getLimitRule()); } 
	 EOF 
;

// Rule Limit
ruleLimit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLimitAccess().getCvAssignment()); }
(rule__Limit__CvAssignment)
{ after(grammarAccess.getLimitAccess().getCvAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleSetExpression
entryRuleSetExpression 
:
{ before(grammarAccess.getSetExpressionRule()); }
	 ruleSetExpression
{ after(grammarAccess.getSetExpressionRule()); } 
	 EOF 
;

// Rule SetExpression
ruleSetExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetExpressionAccess().getSetAdditionParserRuleCall()); }
	ruleSetAddition
{ after(grammarAccess.getSetExpressionAccess().getSetAdditionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleTVars
entryRuleTVars 
:
{ before(grammarAccess.getTVarsRule()); }
	 ruleTVars
{ after(grammarAccess.getTVarsRule()); } 
	 EOF 
;

// Rule TVars
ruleTVars
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTVarsAccess().getGroup()); }
(rule__TVars__Group__0)
{ after(grammarAccess.getTVarsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTVar
entryRuleTVar 
:
{ before(grammarAccess.getTVarRule()); }
	 ruleTVar
{ after(grammarAccess.getTVarRule()); } 
	 EOF 
;

// Rule TVar
ruleTVar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTVarAccess().getGroup()); }
(rule__TVar__Group__0)
{ after(grammarAccess.getTVarAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetAddition
entryRuleSetAddition 
:
{ before(grammarAccess.getSetAdditionRule()); }
	 ruleSetAddition
{ after(grammarAccess.getSetAdditionRule()); } 
	 EOF 
;

// Rule SetAddition
ruleSetAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetAdditionAccess().getGroup()); }
(rule__SetAddition__Group__0)
{ after(grammarAccess.getSetAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetMultiplication
entryRuleSetMultiplication 
:
{ before(grammarAccess.getSetMultiplicationRule()); }
	 ruleSetMultiplication
{ after(grammarAccess.getSetMultiplicationRule()); } 
	 EOF 
;

// Rule SetMultiplication
ruleSetMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetMultiplicationAccess().getGroup()); }
(rule__SetMultiplication__Group__0)
{ after(grammarAccess.getSetMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetPrimary
entryRuleSetPrimary 
:
{ before(grammarAccess.getSetPrimaryRule()); }
	 ruleSetPrimary
{ after(grammarAccess.getSetPrimaryRule()); } 
	 EOF 
;

// Rule SetPrimary
ruleSetPrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetPrimaryAccess().getAlternatives()); }
(rule__SetPrimary__Alternatives)
{ after(grammarAccess.getSetPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetLiteral
entryRuleSetLiteral 
:
{ before(grammarAccess.getSetLiteralRule()); }
	 ruleSetLiteral
{ after(grammarAccess.getSetLiteralRule()); } 
	 EOF 
;

// Rule SetLiteral
ruleSetLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetLiteralAccess().getValueAssignment()); }
(rule__SetLiteral__ValueAssignment)
{ after(grammarAccess.getSetLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuantifiedTerm
entryRuleQuantifiedTerm 
:
{ before(grammarAccess.getQuantifiedTermRule()); }
	 ruleQuantifiedTerm
{ after(grammarAccess.getQuantifiedTermRule()); } 
	 EOF 
;

// Rule QuantifiedTerm
ruleQuantifiedTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuantifiedTermAccess().getGroup()); }
(rule__QuantifiedTerm__Group__0)
{ after(grammarAccess.getQuantifiedTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuantifier
entryRuleQuantifier 
:
{ before(grammarAccess.getQuantifierRule()); }
	 ruleQuantifier
{ after(grammarAccess.getQuantifierRule()); } 
	 EOF 
;

// Rule Quantifier
ruleQuantifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuantifierAccess().getAlternatives()); }
(rule__Quantifier__Alternatives)
{ after(grammarAccess.getQuantifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRulePredicateAtom
entryRulePredicateAtom 
:
{ before(grammarAccess.getPredicateAtomRule()); }
	 rulePredicateAtom
{ after(grammarAccess.getPredicateAtomRule()); } 
	 EOF 
;

// Rule PredicateAtom
rulePredicateAtom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPredicateAtomAccess().getGroup()); }
(rule__PredicateAtom__Group__0)
{ after(grammarAccess.getPredicateAtomAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBuiltInAtom
entryRuleBuiltInAtom 
:
{ before(grammarAccess.getBuiltInAtomRule()); }
	 ruleBuiltInAtom
{ after(grammarAccess.getBuiltInAtomRule()); } 
	 EOF 
;

// Rule BuiltInAtom
ruleBuiltInAtom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBuiltInAtomAccess().getGroup()); }
(rule__BuiltInAtom__Group__0)
{ after(grammarAccess.getBuiltInAtomAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomOp
entryRuleAtomOp 
:
{ before(grammarAccess.getAtomOpRule()); }
	 ruleAtomOp
{ after(grammarAccess.getAtomOpRule()); } 
	 EOF 
;

// Rule AtomOp
ruleAtomOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomOpAccess().getAlternatives()); }
(rule__AtomOp__Alternatives)
{ after(grammarAccess.getAtomOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSentence
entryRuleSentence 
:
{ before(grammarAccess.getSentenceRule()); }
	 ruleSentence
{ after(grammarAccess.getSentenceRule()); } 
	 EOF 
;

// Rule Sentence
ruleSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSentenceAccess().getOrSentenceParserRuleCall()); }
	ruleOrSentence
{ after(grammarAccess.getSentenceAccess().getOrSentenceParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrSentence
entryRuleOrSentence 
:
{ before(grammarAccess.getOrSentenceRule()); }
	 ruleOrSentence
{ after(grammarAccess.getOrSentenceRule()); } 
	 EOF 
;

// Rule OrSentence
ruleOrSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrSentenceAccess().getGroup()); }
(rule__OrSentence__Group__0)
{ after(grammarAccess.getOrSentenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndSentence
entryRuleAndSentence 
:
{ before(grammarAccess.getAndSentenceRule()); }
	 ruleAndSentence
{ after(grammarAccess.getAndSentenceRule()); } 
	 EOF 
;

// Rule AndSentence
ruleAndSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndSentenceAccess().getGroup()); }
(rule__AndSentence__Group__0)
{ after(grammarAccess.getAndSentenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotSentence
entryRuleNotSentence 
:
{ before(grammarAccess.getNotSentenceRule()); }
	 ruleNotSentence
{ after(grammarAccess.getNotSentenceRule()); } 
	 EOF 
;

// Rule NotSentence
ruleNotSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotSentenceAccess().getAlternatives()); }
(rule__NotSentence__Alternatives)
{ after(grammarAccess.getNotSentenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimarySentence
entryRulePrimarySentence 
:
{ before(grammarAccess.getPrimarySentenceRule()); }
	 rulePrimarySentence
{ after(grammarAccess.getPrimarySentenceRule()); } 
	 EOF 
;

// Rule PrimarySentence
rulePrimarySentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimarySentenceAccess().getAlternatives()); }
(rule__PrimarySentence__Alternatives)
{ after(grammarAccess.getPrimarySentenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSentenceLiteral
entryRuleSentenceLiteral 
:
{ before(grammarAccess.getSentenceLiteralRule()); }
	 ruleSentenceLiteral
{ after(grammarAccess.getSentenceLiteralRule()); } 
	 EOF 
;

// Rule SentenceLiteral
ruleSentenceLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSentenceLiteralAccess().getPredicateAtomParserRuleCall()); }
	rulePredicateAtom
{ after(grammarAccess.getSentenceLiteralAccess().getPredicateAtomParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMaybeLiteral
entryRuleMaybeLiteral 
:
{ before(grammarAccess.getMaybeLiteralRule()); }
	 ruleMaybeLiteral
{ after(grammarAccess.getMaybeLiteralRule()); } 
	 EOF 
;

// Rule MaybeLiteral
ruleMaybeLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMaybeLiteralAccess().getGroup()); }
(rule__MaybeLiteral__Group__0)
{ after(grammarAccess.getMaybeLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCardinalityConstraint
entryRuleCardinalityConstraint 
:
{ before(grammarAccess.getCardinalityConstraintRule()); }
	 ruleCardinalityConstraint
{ after(grammarAccess.getCardinalityConstraintRule()); } 
	 EOF 
;

// Rule CardinalityConstraint
ruleCardinalityConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getGroup()); }
(rule__CardinalityConstraint__Group__0)
{ after(grammarAccess.getCardinalityConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBound
entryRuleBound 
:
{ before(grammarAccess.getBoundRule()); }
	 ruleBound
{ after(grammarAccess.getBoundRule()); } 
	 EOF 
;

// Rule Bound
ruleBound
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoundAccess().getAvAssignment()); }
(rule__Bound__AvAssignment)
{ after(grammarAccess.getBoundAccess().getAvAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getGroup()); }
(rule__Rule__Group__0)
{ after(grammarAccess.getRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHead
entryRuleHead 
:
{ before(grammarAccess.getHeadRule()); }
	 ruleHead
{ after(grammarAccess.getHeadRule()); } 
	 EOF 
;

// Rule Head
ruleHead
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHeadAccess().getAlternatives()); }
(rule__Head__Alternatives)
{ after(grammarAccess.getHeadAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__BasicTerm__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTermAccess().getTypedVariableParserRuleCall_0()); }
	ruleTypedVariable
{ after(grammarAccess.getBasicTermAccess().getTypedVariableParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBasicTermAccess().getArithmeticTermParserRuleCall_1()); }
	ruleArithmeticTerm
{ after(grammarAccess.getBasicTermAccess().getArithmeticTermParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBasicTermAccess().getFunctionalTermParserRuleCall_2()); }
	ruleFunctionalTerm
{ after(grammarAccess.getBasicTermAccess().getFunctionalTermParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1_0()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_1_1()); }

	'-' 

{ after(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1_0()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_1_1()); }

	'/' 

{ after(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_1_1()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_1_2()); }

	'%' 

{ after(grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getArithmeticLiteralParserRuleCall_0()); }
	ruleArithmeticLiteral
{ after(grammarAccess.getPrimaryAccess().getArithmeticLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
(rule__Primary__Group_1__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticLiteralAccess().getIdentifierAssignment_0()); }
(rule__ArithmeticLiteral__IdentifierAssignment_0)
{ after(grammarAccess.getArithmeticLiteralAccess().getIdentifierAssignment_0()); }
)

    |(
{ before(grammarAccess.getArithmeticLiteralAccess().getValueAssignment_1()); }
(rule__ArithmeticLiteral__ValueAssignment_1)
{ after(grammarAccess.getArithmeticLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetMultiplication__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMultiplicationAccess().getAsteriskKeyword_1_1_0()); }

	'*' 

{ after(grammarAccess.getSetMultiplicationAccess().getAsteriskKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getSetMultiplicationAccess().getReverseSolidusKeyword_1_1_1()); }

	'\\' 

{ after(grammarAccess.getSetMultiplicationAccess().getReverseSolidusKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetPrimary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPrimaryAccess().getSetLiteralParserRuleCall_0()); }
	ruleSetLiteral
{ after(grammarAccess.getSetPrimaryAccess().getSetLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSetPrimaryAccess().getGroup_1()); }
(rule__SetPrimary__Group_1__0)
{ after(grammarAccess.getSetPrimaryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__ValueAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetLiteralAccess().getValueSetKeyword_0_0()); }

	'set' 

{ after(grammarAccess.getSetLiteralAccess().getValueSetKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getSetLiteralAccess().getValueRangeKeyword_0_1()); }

	'range' 

{ after(grammarAccess.getSetLiteralAccess().getValueRangeKeyword_0_1()); }
)

    |(
{ before(grammarAccess.getSetLiteralAccess().getValueSet_constrKeyword_0_2()); }

	'set_constr' 

{ after(grammarAccess.getSetLiteralAccess().getValueSet_constrKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifierAccess().getEveryKeyword_0()); }

	'every' 

{ after(grammarAccess.getQuantifierAccess().getEveryKeyword_0()); }
)

    |(
{ before(grammarAccess.getQuantifierAccess().getSomeKeyword_1()); }

	'some' 

{ after(grammarAccess.getQuantifierAccess().getSomeKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__AtomOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomOpAccess().getGreaterThanSignKeyword_0()); }

	'>' 

{ after(grammarAccess.getAtomOpAccess().getGreaterThanSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getAtomOpAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getAtomOpAccess().getLessThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getAtomOpAccess().getGreaterThanSignEqualsSignKeyword_2()); }

	'>=' 

{ after(grammarAccess.getAtomOpAccess().getGreaterThanSignEqualsSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getAtomOpAccess().getLessThanSignEqualsSignKeyword_3()); }

	'<=' 

{ after(grammarAccess.getAtomOpAccess().getLessThanSignEqualsSignKeyword_3()); }
)

    |(
{ before(grammarAccess.getAtomOpAccess().getEqualsSignKeyword_4()); }

	'=' 

{ after(grammarAccess.getAtomOpAccess().getEqualsSignKeyword_4()); }
)

    |(
{ before(grammarAccess.getAtomOpAccess().getExclamationMarkEqualsSignKeyword_5()); }

	'!=' 

{ after(grammarAccess.getAtomOpAccess().getExclamationMarkEqualsSignKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotSentence__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotSentenceAccess().getPrimarySentenceParserRuleCall_0()); }
	rulePrimarySentence
{ after(grammarAccess.getNotSentenceAccess().getPrimarySentenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNotSentenceAccess().getGroup_1()); }
(rule__NotSentence__Group_1__0)
{ after(grammarAccess.getNotSentenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimarySentence__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimarySentenceAccess().getSentenceLiteralParserRuleCall_0()); }
	ruleSentenceLiteral
{ after(grammarAccess.getPrimarySentenceAccess().getSentenceLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimarySentenceAccess().getGroup_1()); }
(rule__PrimarySentence__Group_1__0)
{ after(grammarAccess.getPrimarySentenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getMaybeLiteralParserRuleCall_0()); }
	ruleMaybeLiteral
{ after(grammarAccess.getHeadAccess().getMaybeLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getHeadAccess().getCardinalityConstraintParserRuleCall_1()); }
	ruleCardinalityConstraint
{ after(grammarAccess.getHeadAccess().getCardinalityConstraintParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getRuleParserRuleCall_0()); }
	ruleRule
{ after(grammarAccess.getStatementAccess().getRuleParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getTypeDeclarationParserRuleCall_1()); }
	ruleTypeDeclaration
{ after(grammarAccess.getStatementAccess().getTypeDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getConstantDeclarationParserRuleCall_2()); }
	ruleConstantDeclaration
{ after(grammarAccess.getStatementAccess().getConstantDeclarationParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__TypedVariable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedVariable__Group__0__Impl
	rule__TypedVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedVariableAccess().getTypeAssignment_0()); }
(rule__TypedVariable__TypeAssignment_0)
{ after(grammarAccess.getTypedVariableAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedVariable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedVariable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedVariableAccess().getVarAssignment_1()); }
(rule__TypedVariable__VarAssignment_1)
{ after(grammarAccess.getTypedVariableAccess().getVarAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAdditionLhsAction_1_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getAdditionLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAlternatives_1_1()); }
(rule__Addition__Alternatives_1_1)
{ after(grammarAccess.getAdditionAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRhsAssignment_1_2()); }
(rule__Addition__RhsAssignment_1_2)
{ after(grammarAccess.getAdditionAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
{ after(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLhsAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAlternatives_1_1()); }
(rule__Multiplication__Alternatives_1_1)
{ after(grammarAccess.getMultiplicationAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRhsAssignment_1_2()); }
(rule__Multiplication__RhsAssignment_1_2)
{ after(grammarAccess.getMultiplicationAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Primary__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_1_1()); }
	ruleAddition
{ after(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionalTerm__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionalTerm__Group__0__Impl
	rule__FunctionalTerm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionalTerm__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionalTermAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getFunctionalTermAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionalTerm__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionalTerm__Group__1__Impl
	rule__FunctionalTerm__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionalTerm__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionalTermAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionalTermAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionalTerm__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionalTerm__Group__2__Impl
	rule__FunctionalTerm__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionalTerm__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionalTermAccess().getBasicTermsParserRuleCall_2()); }
	ruleBasicTerms
{ after(grammarAccess.getFunctionalTermAccess().getBasicTermsParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionalTerm__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionalTerm__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionalTerm__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionalTermAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getFunctionalTermAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BasicTerms__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicTerms__Group__0__Impl
	rule__BasicTerms__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicTerms__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTermsAccess().getCarAssignment_0()); }
(rule__BasicTerms__CarAssignment_0)
{ after(grammarAccess.getBasicTermsAccess().getCarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicTerms__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicTerms__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicTerms__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTermsAccess().getGroup_1()); }
(rule__BasicTerms__Group_1__0)*
{ after(grammarAccess.getBasicTermsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BasicTerms__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicTerms__Group_1__0__Impl
	rule__BasicTerms__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicTerms__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTermsAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getBasicTermsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicTerms__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicTerms__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicTerms__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTermsAccess().getCdrAssignment_1_1()); }
(rule__BasicTerms__CdrAssignment_1_1)
{ after(grammarAccess.getBasicTermsAccess().getCdrAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstantDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__0__Impl
	rule__ConstantDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getIdAssignment_0()); }
(rule__ConstantDeclaration__IdAssignment_0)
{ after(grammarAccess.getConstantDeclarationAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__1__Impl
	rule__ConstantDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getConstantDeclarationAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__2__Impl
	rule__ConstantDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getCvAssignment_2()); }
(rule__ConstantDeclaration__CvAssignment_2)
{ after(grammarAccess.getConstantDeclarationAccess().getCvAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getFullStopKeyword_3()); }

	'.' 

{ after(grammarAccess.getConstantDeclarationAccess().getFullStopKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TypeDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__0__Impl
	rule__TypeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getIdAssignment_0()); }
(rule__TypeDeclaration__IdAssignment_0)
{ after(grammarAccess.getTypeDeclarationAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__1__Impl
	rule__TypeDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__2__Impl
	rule__TypeDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getExpAssignment_2()); }
(rule__TypeDeclaration__ExpAssignment_2)
{ after(grammarAccess.getTypeDeclarationAccess().getExpAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getFullStopKeyword_3()); }

	'.' 

{ after(grammarAccess.getTypeDeclarationAccess().getFullStopKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__TVars__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TVars__Group__0__Impl
	rule__TVars__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TVars__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarsAccess().getCarAssignment_0()); }
(rule__TVars__CarAssignment_0)
{ after(grammarAccess.getTVarsAccess().getCarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TVars__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TVars__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TVars__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarsAccess().getGroup_1()); }
(rule__TVars__Group_1__0)*
{ after(grammarAccess.getTVarsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TVars__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TVars__Group_1__0__Impl
	rule__TVars__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TVars__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarsAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getTVarsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TVars__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TVars__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TVars__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarsAccess().getCdrAssignment_1_1()); }
(rule__TVars__CdrAssignment_1_1)
{ after(grammarAccess.getTVarsAccess().getCdrAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TVar__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TVar__Group__0__Impl
	rule__TVar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TVar__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarAccess().getVariableParserRuleCall_0()); }
	ruleVariable
{ after(grammarAccess.getTVarAccess().getVariableParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TVar__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TVar__Group__1__Impl
	rule__TVar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TVar__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarAccess().getInKeyword_1()); }

	'in' 

{ after(grammarAccess.getTVarAccess().getInKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TVar__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TVar__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TVar__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarAccess().getIDTerminalRuleCall_2()); }
	RULE_ID
{ after(grammarAccess.getTVarAccess().getIDTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SetAddition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetAddition__Group__0__Impl
	rule__SetAddition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetAddition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAdditionAccess().getSetMultiplicationParserRuleCall_0()); }
	ruleSetMultiplication
{ after(grammarAccess.getSetAdditionAccess().getSetMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetAddition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetAddition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetAddition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAdditionAccess().getGroup_1()); }
(rule__SetAddition__Group_1__0)*
{ after(grammarAccess.getSetAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SetAddition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetAddition__Group_1__0__Impl
	rule__SetAddition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetAddition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAdditionAccess().getSetAdditionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getSetAdditionAccess().getSetAdditionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetAddition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetAddition__Group_1__1__Impl
	rule__SetAddition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetAddition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAdditionAccess().getPlusSignKeyword_1_1()); }

	'+' 

{ after(grammarAccess.getSetAdditionAccess().getPlusSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetAddition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetAddition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetAddition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAdditionAccess().getRightAssignment_1_2()); }
(rule__SetAddition__RightAssignment_1_2)
{ after(grammarAccess.getSetAdditionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SetMultiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetMultiplication__Group__0__Impl
	rule__SetMultiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetMultiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMultiplicationAccess().getSetPrimaryParserRuleCall_0()); }
	ruleSetPrimary
{ after(grammarAccess.getSetMultiplicationAccess().getSetPrimaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetMultiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetMultiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetMultiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMultiplicationAccess().getGroup_1()); }
(rule__SetMultiplication__Group_1__0)*
{ after(grammarAccess.getSetMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SetMultiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetMultiplication__Group_1__0__Impl
	rule__SetMultiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetMultiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMultiplicationAccess().getSetMultiplicationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getSetMultiplicationAccess().getSetMultiplicationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetMultiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetMultiplication__Group_1__1__Impl
	rule__SetMultiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetMultiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMultiplicationAccess().getAlternatives_1_1()); }
(rule__SetMultiplication__Alternatives_1_1)
{ after(grammarAccess.getSetMultiplicationAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetMultiplication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetMultiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetMultiplication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMultiplicationAccess().getRightAssignment_1_2()); }
(rule__SetMultiplication__RightAssignment_1_2)
{ after(grammarAccess.getSetMultiplicationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SetPrimary__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetPrimary__Group_1__0__Impl
	rule__SetPrimary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPrimary__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPrimaryAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getSetPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetPrimary__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetPrimary__Group_1__1__Impl
	rule__SetPrimary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPrimary__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPrimaryAccess().getSetAdditionParserRuleCall_1_1()); }
	ruleSetAddition
{ after(grammarAccess.getSetPrimaryAccess().getSetAdditionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetPrimary__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetPrimary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPrimary__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPrimaryAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getSetPrimaryAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QuantifiedTerm__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedTerm__Group__0__Impl
	rule__QuantifiedTerm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedTerm__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedTermAccess().getQuantifierParserRuleCall_0()); }
	ruleQuantifier
{ after(grammarAccess.getQuantifiedTermAccess().getQuantifierParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedTerm__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedTerm__Group__1__Impl
	rule__QuantifiedTerm__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedTerm__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedTermAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getQuantifiedTermAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedTerm__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantifiedTerm__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedTerm__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedTermAccess().getVariableParserRuleCall_2()); }
	ruleVariable
{ after(grammarAccess.getQuantifiedTermAccess().getVariableParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PredicateAtom__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateAtom__Group__0__Impl
	rule__PredicateAtom__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateAtom__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAtomAccess().getFidAssignment_0()); }
(rule__PredicateAtom__FidAssignment_0)
{ after(grammarAccess.getPredicateAtomAccess().getFidAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateAtom__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateAtom__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateAtom__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAtomAccess().getGroup_1()); }
(rule__PredicateAtom__Group_1__0)?
{ after(grammarAccess.getPredicateAtomAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PredicateAtom__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateAtom__Group_1__0__Impl
	rule__PredicateAtom__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateAtom__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAtomAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPredicateAtomAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateAtom__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateAtom__Group_1__1__Impl
	rule__PredicateAtom__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateAtom__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAtomAccess().getTermsAssignment_1_1()); }
(rule__PredicateAtom__TermsAssignment_1_1)
{ after(grammarAccess.getPredicateAtomAccess().getTermsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateAtom__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateAtom__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateAtom__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAtomAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPredicateAtomAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BuiltInAtom__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltInAtom__Group__0__Impl
	rule__BuiltInAtom__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInAtom__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInAtomAccess().getLhsAssignment_0()); }
(rule__BuiltInAtom__LhsAssignment_0)
{ after(grammarAccess.getBuiltInAtomAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BuiltInAtom__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltInAtom__Group__1__Impl
	rule__BuiltInAtom__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInAtom__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInAtomAccess().getOpAssignment_1()); }
(rule__BuiltInAtom__OpAssignment_1)
{ after(grammarAccess.getBuiltInAtomAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BuiltInAtom__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltInAtom__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInAtom__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInAtomAccess().getRhsAssignment_2()); }
(rule__BuiltInAtom__RhsAssignment_2)
{ after(grammarAccess.getBuiltInAtomAccess().getRhsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrSentence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrSentence__Group__0__Impl
	rule__OrSentence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrSentence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrSentenceAccess().getAndSentenceParserRuleCall_0()); }
	ruleAndSentence
{ after(grammarAccess.getOrSentenceAccess().getAndSentenceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrSentence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrSentence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrSentence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrSentenceAccess().getGroup_1()); }
(rule__OrSentence__Group_1__0)*
{ after(grammarAccess.getOrSentenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrSentence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrSentence__Group_1__0__Impl
	rule__OrSentence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrSentence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrSentenceAccess().getOrSentenceLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOrSentenceAccess().getOrSentenceLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrSentence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrSentence__Group_1__1__Impl
	rule__OrSentence__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrSentence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrSentenceAccess().getOrKeyword_1_1()); }

	'or' 

{ after(grammarAccess.getOrSentenceAccess().getOrKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrSentence__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrSentence__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrSentence__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrSentenceAccess().getRightAssignment_1_2()); }
(rule__OrSentence__RightAssignment_1_2)
{ after(grammarAccess.getOrSentenceAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndSentence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndSentence__Group__0__Impl
	rule__AndSentence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndSentence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndSentenceAccess().getNotSentenceParserRuleCall_0()); }
	ruleNotSentence
{ after(grammarAccess.getAndSentenceAccess().getNotSentenceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndSentence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndSentence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndSentence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndSentenceAccess().getGroup_1()); }
(rule__AndSentence__Group_1__0)*
{ after(grammarAccess.getAndSentenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndSentence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndSentence__Group_1__0__Impl
	rule__AndSentence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndSentence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndSentenceAccess().getAndSentenceLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndSentenceAccess().getAndSentenceLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndSentence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndSentence__Group_1__1__Impl
	rule__AndSentence__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndSentence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndSentenceAccess().getAndKeyword_1_1()); }

	'and' 

{ after(grammarAccess.getAndSentenceAccess().getAndKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndSentence__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndSentence__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndSentence__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndSentenceAccess().getRightAssignment_1_2()); }
(rule__AndSentence__RightAssignment_1_2)
{ after(grammarAccess.getAndSentenceAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NotSentence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotSentence__Group_1__0__Impl
	rule__NotSentence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotSentence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotSentenceAccess().getNotKeyword_1_0()); }

	'not' 

{ after(grammarAccess.getNotSentenceAccess().getNotKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotSentence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotSentence__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotSentence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotSentenceAccess().getPrimarySentenceParserRuleCall_1_1()); }
	rulePrimarySentence
{ after(grammarAccess.getNotSentenceAccess().getPrimarySentenceParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimarySentence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimarySentence__Group_1__0__Impl
	rule__PrimarySentence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimarySentence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimarySentenceAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPrimarySentenceAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimarySentence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimarySentence__Group_1__1__Impl
	rule__PrimarySentence__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimarySentence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimarySentenceAccess().getOrSentenceParserRuleCall_1_1()); }
	ruleOrSentence
{ after(grammarAccess.getPrimarySentenceAccess().getOrSentenceParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimarySentence__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimarySentence__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimarySentence__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimarySentenceAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPrimarySentenceAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MaybeLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaybeLiteral__Group__0__Impl
	rule__MaybeLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MaybeLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaybeLiteralAccess().getMaybeKeyword_0()); }

	'maybe' 

{ after(grammarAccess.getMaybeLiteralAccess().getMaybeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaybeLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaybeLiteral__Group__1__Impl
	rule__MaybeLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MaybeLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaybeLiteralAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getMaybeLiteralAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaybeLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaybeLiteral__Group__2__Impl
	rule__MaybeLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MaybeLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaybeLiteralAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getMaybeLiteralAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaybeLiteral__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaybeLiteral__Group__3__Impl
	rule__MaybeLiteral__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MaybeLiteral__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaybeLiteralAccess().getBasicTermsParserRuleCall_3()); }
	ruleBasicTerms
{ after(grammarAccess.getMaybeLiteralAccess().getBasicTermsParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaybeLiteral__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaybeLiteral__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MaybeLiteral__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaybeLiteralAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getMaybeLiteralAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__CardinalityConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__0__Impl
	rule__CardinalityConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getLhsAssignment_0()); }
(rule__CardinalityConstraint__LhsAssignment_0)
{ after(grammarAccess.getCardinalityConstraintAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__1__Impl
	rule__CardinalityConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getLessThanSignEqualsSignKeyword_1()); }

	'<=' 

{ after(grammarAccess.getCardinalityConstraintAccess().getLessThanSignEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__2__Impl
	rule__CardinalityConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getVerticalLineKeyword_2()); }

	'|' 

{ after(grammarAccess.getCardinalityConstraintAccess().getVerticalLineKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__3__Impl
	rule__CardinalityConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getCardinalityConstraintAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__4__Impl
	rule__CardinalityConstraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getIdAssignment_4()); }
(rule__CardinalityConstraint__IdAssignment_4)
{ after(grammarAccess.getCardinalityConstraintAccess().getIdAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__5__Impl
	rule__CardinalityConstraint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getLeftParenthesisKeyword_5()); }

	'(' 

{ after(grammarAccess.getCardinalityConstraintAccess().getLeftParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__6__Impl
	rule__CardinalityConstraint__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getTermsAssignment_6()); }
(rule__CardinalityConstraint__TermsAssignment_6)
{ after(grammarAccess.getCardinalityConstraintAccess().getTermsAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__7__Impl
	rule__CardinalityConstraint__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getRightParenthesisKeyword_7()); }

	')' 

{ after(grammarAccess.getCardinalityConstraintAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__8__Impl
	rule__CardinalityConstraint__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getRightCurlyBracketKeyword_8()); }

	'}' 

{ after(grammarAccess.getCardinalityConstraintAccess().getRightCurlyBracketKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__9__Impl
	rule__CardinalityConstraint__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getVerticalLineKeyword_9()); }

	'|' 

{ after(grammarAccess.getCardinalityConstraintAccess().getVerticalLineKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__10__Impl
	rule__CardinalityConstraint__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getLessThanSignEqualsSignKeyword_10()); }

	'<=' 

{ after(grammarAccess.getCardinalityConstraintAccess().getLessThanSignEqualsSignKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getRhsAssignment_11()); }
(rule__CardinalityConstraint__RhsAssignment_11)
{ after(grammarAccess.getCardinalityConstraintAccess().getRhsAssignment_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


























rule__Rule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getHeadAssignment_0()); }
(rule__Rule__HeadAssignment_0)
{ after(grammarAccess.getRuleAccess().getHeadAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getGroup_1()); }
(rule__Rule__Group_1__0)?
{ after(grammarAccess.getRuleAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getRuleAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Rule__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_1__0__Impl
	rule__Rule__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getIfKeyword_1_0()); }

	'if' 

{ after(grammarAccess.getRuleAccess().getIfKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getBodyAssignment_1_1()); }
(rule__Rule__BodyAssignment_1_1)
{ after(grammarAccess.getRuleAccess().getBodyAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Program__StatementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_0()); }
	ruleStatement{ after(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__IdentifierAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getIdentifierUIDTerminalRuleCall_0()); }
	RULE_UID{ after(grammarAccess.getVariableAccess().getIdentifierUIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariable__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedVariableAccess().getTypeIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getTypedVariableAccess().getTypeIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariable__VarAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedVariableAccess().getVarVariableParserRuleCall_1_0()); }
	ruleVariable{ after(grammarAccess.getTypedVariableAccess().getVarVariableParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRhsMultiplicationParserRuleCall_1_2_0()); }
	ruleMultiplication{ after(grammarAccess.getAdditionAccess().getRhsMultiplicationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRhsPrimaryParserRuleCall_1_2_0()); }
	rulePrimary{ after(grammarAccess.getMultiplicationAccess().getRhsPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticLiteral__IdentifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticLiteralAccess().getIdentifierIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getArithmeticLiteralAccess().getIdentifierIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticLiteralAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getArithmeticLiteralAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicTerms__CarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTermsAccess().getCarBasicTermParserRuleCall_0_0()); }
	ruleBasicTerm{ after(grammarAccess.getBasicTermsAccess().getCarBasicTermParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicTerms__CdrAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTermsAccess().getCdrBasicTermParserRuleCall_1_1_0()); }
	ruleBasicTerm{ after(grammarAccess.getBasicTermsAccess().getCdrBasicTermParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getIdLIDTerminalRuleCall_0_0()); }
	RULE_LID{ after(grammarAccess.getConstantDeclarationAccess().getIdLIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__CvAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getCvArithmeticTermParserRuleCall_2_0()); }
	ruleArithmeticTerm{ after(grammarAccess.getConstantDeclarationAccess().getCvArithmeticTermParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getIdIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getTypeDeclarationAccess().getIdIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__ExpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getExpSetExpressionParserRuleCall_2_0()); }
	ruleSetExpression{ after(grammarAccess.getTypeDeclarationAccess().getExpSetExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__CvAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitAccess().getCvArithmeticTermParserRuleCall_0()); }
	ruleArithmeticTerm{ after(grammarAccess.getLimitAccess().getCvArithmeticTermParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__TVars__CarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarsAccess().getCarTVarParserRuleCall_0_0()); }
	ruleTVar{ after(grammarAccess.getTVarsAccess().getCarTVarParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TVars__CdrAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarsAccess().getCdrTVarParserRuleCall_1_1_0()); }
	ruleTVar{ after(grammarAccess.getTVarsAccess().getCdrTVarParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetAddition__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAdditionAccess().getRightSetMultiplicationParserRuleCall_1_2_0()); }
	ruleSetMultiplication{ after(grammarAccess.getSetAdditionAccess().getRightSetMultiplicationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetMultiplication__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMultiplicationAccess().getRightSetPrimaryParserRuleCall_1_2_0()); }
	ruleSetPrimary{ after(grammarAccess.getSetMultiplicationAccess().getRightSetPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetLiteralAccess().getValueAlternatives_0()); }
(rule__SetLiteral__ValueAlternatives_0)
{ after(grammarAccess.getSetLiteralAccess().getValueAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateAtom__FidAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAtomAccess().getFidIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getPredicateAtomAccess().getFidIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateAtom__TermsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAtomAccess().getTermsBasicTermsParserRuleCall_1_1_0()); }
	ruleBasicTerms{ after(grammarAccess.getPredicateAtomAccess().getTermsBasicTermsParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInAtom__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInAtomAccess().getLhsBasicTermParserRuleCall_0_0()); }
	ruleBasicTerm{ after(grammarAccess.getBuiltInAtomAccess().getLhsBasicTermParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInAtom__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInAtomAccess().getOpAtomOpParserRuleCall_1_0()); }
	ruleAtomOp{ after(grammarAccess.getBuiltInAtomAccess().getOpAtomOpParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInAtom__RhsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInAtomAccess().getRhsBasicTermParserRuleCall_2_0()); }
	ruleBasicTerm{ after(grammarAccess.getBuiltInAtomAccess().getRhsBasicTermParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrSentence__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrSentenceAccess().getRightAndSentenceParserRuleCall_1_2_0()); }
	ruleAndSentence{ after(grammarAccess.getOrSentenceAccess().getRightAndSentenceParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndSentence__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndSentenceAccess().getRightNotSentenceParserRuleCall_1_2_0()); }
	ruleNotSentence{ after(grammarAccess.getAndSentenceAccess().getRightNotSentenceParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getLhsBoundParserRuleCall_0_0()); }
	ruleBound{ after(grammarAccess.getCardinalityConstraintAccess().getLhsBoundParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__IdAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getIdIDTerminalRuleCall_4_0()); }
	RULE_ID{ after(grammarAccess.getCardinalityConstraintAccess().getIdIDTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__TermsAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getTermsBasicTermsParserRuleCall_6_0()); }
	ruleBasicTerms{ after(grammarAccess.getCardinalityConstraintAccess().getTermsBasicTermsParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__RhsAssignment_11
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getRhsBoundParserRuleCall_11_0()); }
	ruleBound{ after(grammarAccess.getCardinalityConstraintAccess().getRhsBoundParserRuleCall_11_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bound__AvAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoundAccess().getAvArithmeticTermParserRuleCall_0()); }
	ruleArithmeticTerm{ after(grammarAccess.getBoundAccess().getAvArithmeticTermParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__HeadAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getHeadHeadParserRuleCall_0_0()); }
	ruleHead{ after(grammarAccess.getRuleAccess().getHeadHeadParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__BodyAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getBodySentenceParserRuleCall_1_1_0()); }
	ruleSentence{ after(grammarAccess.getRuleAccess().getBodySentenceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_LID : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_UID : 'A'..'Z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


