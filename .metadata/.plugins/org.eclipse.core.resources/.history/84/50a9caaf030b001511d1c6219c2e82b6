grammar net.certware.argument.language.L with org.eclipse.xtext.common.Terminals

generate l "http://www.certware.net/argument/language/L"



Model:
	sentences += Sentence*
;
	
// identifier with first character lower
terminal LID : ('a'..'z')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

// identifier with first character upper
terminal UID : ('A'..'Z')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;


// 1.1 Symbols
Symbol:
	IntegerNumeral |
	Identifier |
	SpecialCharacter
;

IntegerNumeral:
	INT // provided by Terminals and returning ECore Integer type 
;

Identifier:
	ID // provided by Terminals and returning ECore String type
;

SpecialCharacter:
	'>' | '=' | '>' | '+' | '-' | '*' | '{' | '}' | '(' | ')' | ',' | '.' '|'	
;


// 1.2 Basic Terms
// Here parentheses are not optional
// We have omitted FunctionalTerm as a category of BasicTerm to preclude recursion complaint
// This omission likely is a problem owing to subterms; see page 3 of the specification.
BasicTerm:
	Constant |
	Variable |
	TypedVariable |
	ArithmeticTerm 
	// FunctionalTerm omitted as basic term 
;

Constant:
	identifier = LID |
	numeral=IntegerNumeral 
;

Variable:
	identifier = UID
;

TypedVariable:
	type=ID var=Variable	
;

ArithmeticTerm:
	'-' '(' ArithmeticTermOperand ')' |
	'(' lhs=ArithmeticTermOperand op=('+'|'-'|'*'|'/'|'%') rhs=ArithmeticTermOperand')'
;

ArithmeticTermOperand:
	operand=(IntegerNumeral | Variable | Constant | ArithmeticTerm)
;

FunctionalTerm:
	ID'('terms+=BasicTerm+')'
;

SubTerm:
	BasicTerm	// technically incorrect, use adapter to inspect
;

GroundTerm:
	BasicTerm	// technically incorrect, use adapter to inspect
;


// 1.3 Constant Declaration
ConstantDeclaration:
	LID '=' value=(Constant | IntegerNumeral | ArithmeticTerm) '.'	
;

// 1.4 Set Expression
SetExpression :
	'{' car=GroundTerm (',' cdr+=GroundTerm)* '}' |
	id=ID |
	// Term 'where' ... I don't understand this one
	'(' lhs=SetExpression ('+' | '*' | '/' ) rhs=SetExpression ')' 
;

// 1.5 Type Declarations
Type :
	id=ID '=' exp=SetExpression '.' 
;     

// 1.6 Quantified Terms
QuantifiedTerm:
	quqntifier=('every' | 'some') p=Type |
	'some' tVar=TypedVariable
;

// 1.7 Terms
Term:
	BasicTerm | 
	QuantifiedTerm 
;

// 1.8 Atoms
Atom:
	PredicateAtom |
	BuiltInAtom
;

PredicateAtom:
	fid=ID(terms+=Term*)	
;

BuiltInAtom:
	lhs=Term op=SpecialOp rhs=Term 
;

SpecialOp:
	'<' | '>' | '>=' | '<=' | '=' | '<>' ;

// 1.9 Sentences
Sentence:
	Atom |
	Expression
;	


