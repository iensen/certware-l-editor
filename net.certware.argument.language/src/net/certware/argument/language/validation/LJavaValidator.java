/*
* generated by Xtext
* Updated manually.
* @author mrb
*/
package net.certware.argument.language.validation;

import java.util.Dictionary;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import net.certware.argument.language.l.LPackage;
import net.certware.argument.language.l.Program;
import net.certware.argument.language.l.Range;
import net.certware.argument.language.l.TVar;
import net.certware.argument.language.l.TypeDeclaration;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;

/**
 * Custom validation rules. 
 * Using Guice injection method with the Java-based EValidator API. 
 */
public class LJavaValidator extends net.certware.argument.language.validation.AbstractLJavaValidator {

	/**
	 * Check program has at least one sentence.
	 * @param program
	 * @category error if program has no sentences
	 */
	@Check public void checkProgramEmpty(Program program) {
		if ( program.getStatements().isEmpty() ) {
			error("Program has no statements",
					LPackage.Literals.PROGRAM__STATEMENTS);
		}
	}
	
	/**
	 * Check whether range has both left and right sides.
	 * @param range
	 * @category warning if either left or right elements is empty
	 */
	@Check public void checkRangeIncludesLeftAndRight(Range range) {
		if ( range.getLhs().eContents().isEmpty() == true ||
				range.getRhs().eContents().isEmpty() == true ) {
			warning("Range must include both left- and right-hand sides",
					LPackage.Literals.RANGE__LHS);
		}
	}
	
	/**
	 * Check type variable refers to defined type.
	 * @param tvar
	 * @category error if type variable refers to undefined type
	 */
	@Check public void checkTypeVariableRefersToDefinedType(TVar tvar) {
		boolean found = false;
		String id = tvar.getId();
		if ( id.isEmpty() ) // premature test, bail out
			return;

		EObject program = EcoreUtil2.getRootContainer(tvar);
		List<TypeDeclaration> typeDeclarations = 
				EcoreUtil2.getAllContentsOfType(program, TypeDeclaration.class);
		
		for ( TypeDeclaration td : typeDeclarations ) {
			if ( td.getId().equals( id )) {
				found = true;
				break;
			}
		}
				
		if ( ! found ) {	// haven't found a declaration, emit error
			error("Type variable must refer to declared type",
					LPackage.Literals.TVAR__ID);
		}
	}
}
