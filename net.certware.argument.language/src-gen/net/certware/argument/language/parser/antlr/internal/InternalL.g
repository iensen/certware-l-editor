/*
* generated by Xtext
*/
grammar InternalL;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package net.certware.argument.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.certware.argument.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import net.certware.argument.language.services.LGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private LGrammarAccess grammarAccess;
 	
    public InternalLParser(TokenStream input, LGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected LGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_0()); 
	    }
		lv_statements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleBasicTerm
entryRuleBasicTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicTermRule()); }
	 iv_ruleBasicTerm=ruleBasicTerm 
	 { $current=$iv_ruleBasicTerm.current; } 
	 EOF 
;

// Rule BasicTerm
ruleBasicTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBasicTermAccess().getTypedVariableParserRuleCall_0()); 
    }
    this_TypedVariable_0=ruleTypedVariable
    { 
        $current = $this_TypedVariable_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBasicTermAccess().getArithmeticTermParserRuleCall_1()); 
    }
    this_ArithmeticTerm_1=ruleArithmeticTerm
    { 
        $current = $this_ArithmeticTerm_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBasicTermAccess().getFunctionalTermParserRuleCall_2()); 
    }
    this_FunctionalTerm_2=ruleFunctionalTerm
    { 
        $current = $this_FunctionalTerm_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_identifier_0_0=RULE_UID
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getVariableAccess().getIdentifierUIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"UID");
	    }

)
)
;





// Entry rule entryRuleTypedVariable
entryRuleTypedVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedVariableRule()); }
	 iv_ruleTypedVariable=ruleTypedVariable 
	 { $current=$iv_ruleTypedVariable.current; } 
	 EOF 
;

// Rule TypedVariable
ruleTypedVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_type_0_0=RULE_ID
		{
			newLeafNode(lv_type_0_0, grammarAccess.getTypedVariableAccess().getTypeIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypedVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedVariableAccess().getVarVariableParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedVariableRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleArithmeticTerm
entryRuleArithmeticTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithmeticTermRule()); }
	 iv_ruleArithmeticTerm=ruleArithmeticTerm 
	 { $current=$iv_ruleArithmeticTerm.current; } 
	 EOF 
;

// Rule ArithmeticTerm
ruleArithmeticTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArithmeticTermAccess().getAdditionParserRuleCall()); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getAdditionLhsAction_1_0(),
            $current);
    }
)(	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1_0());
    }

    |	otherlv_3='-' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getRhsMultiplicationParserRuleCall_1_2_0()); 
	    }
		lv_rhs_4_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_4_0, 
        		"Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getMultiplicationLhsAction_1_0(),
            $current);
    }
)(	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1_0());
    }

    |	otherlv_3='/' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_1_1());
    }

    |	otherlv_4='%' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_1_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRhsPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_rhs_5_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_5_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getArithmeticLiteralParserRuleCall_0()); 
    }
    this_ArithmeticLiteral_0=ruleArithmeticLiteral
    { 
        $current = $this_ArithmeticLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_1_1()); 
    }
    this_Addition_2=ruleAddition
    { 
        $current = $this_Addition_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleArithmeticLiteral
entryRuleArithmeticLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithmeticLiteralRule()); }
	 iv_ruleArithmeticLiteral=ruleArithmeticLiteral 
	 { $current=$iv_ruleArithmeticLiteral.current; } 
	 EOF 
;

// Rule ArithmeticLiteral
ruleArithmeticLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_identifier_0_0=RULE_ID
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getArithmeticLiteralAccess().getIdentifierIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"ID");
	    }

)
)
    |(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getArithmeticLiteralAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleFunctionalTerm
entryRuleFunctionalTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionalTermRule()); }
	 iv_ruleFunctionalTerm=ruleFunctionalTerm 
	 { $current=$iv_ruleFunctionalTerm.current; } 
	 EOF 
;

// Rule FunctionalTerm
ruleFunctionalTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_ID_0=RULE_ID
    { 
    newLeafNode(this_ID_0, grammarAccess.getFunctionalTermAccess().getIDTerminalRuleCall_0()); 
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionalTermAccess().getLeftParenthesisKeyword_1());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFunctionalTermAccess().getBasicTermsParserRuleCall_2()); 
    }
    this_BasicTerms_2=ruleBasicTerms
    { 
        $current = $this_BasicTerms_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionalTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleBasicTerms
entryRuleBasicTerms returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicTermsRule()); }
	 iv_ruleBasicTerms=ruleBasicTerms 
	 { $current=$iv_ruleBasicTerms.current; } 
	 EOF 
;

// Rule BasicTerms
ruleBasicTerms returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBasicTermsAccess().getCarBasicTermParserRuleCall_0_0()); 
	    }
		lv_car_0_0=ruleBasicTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicTermsRule());
	        }
       		set(
       			$current, 
       			"car",
        		lv_car_0_0, 
        		"BasicTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBasicTermsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicTermsAccess().getCdrBasicTermParserRuleCall_1_1_0()); 
	    }
		lv_cdr_2_0=ruleBasicTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicTermsRule());
	        }
       		add(
       			$current, 
       			"cdr",
        		lv_cdr_2_0, 
        		"BasicTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConstantDeclaration
entryRuleConstantDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDeclarationRule()); }
	 iv_ruleConstantDeclaration=ruleConstantDeclaration 
	 { $current=$iv_ruleConstantDeclaration.current; } 
	 EOF 
;

// Rule ConstantDeclaration
ruleConstantDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_LID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getConstantDeclarationAccess().getIdLIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"LID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstantDeclarationAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getCvArithmeticTermParserRuleCall_2_0()); 
	    }
		lv_cv_2_0=ruleArithmeticTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"cv",
        		lv_cv_2_0, 
        		"ArithmeticTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstantDeclarationAccess().getFullStopKeyword_3());
    }
)
;





// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	 iv_ruleTypeDeclaration=ruleTypeDeclaration 
	 { $current=$iv_ruleTypeDeclaration.current; } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getTypeDeclarationAccess().getIdIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getExpSetExpressionParserRuleCall_2_0()); 
	    }
		lv_exp_2_0=ruleSetExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"SetExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeDeclarationAccess().getFullStopKeyword_3());
    }
)
;





// Entry rule entryRuleLimit
entryRuleLimit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLimitRule()); }
	 iv_ruleLimit=ruleLimit 
	 { $current=$iv_ruleLimit.current; } 
	 EOF 
;

// Rule Limit
ruleLimit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLimitAccess().getCvArithmeticTermParserRuleCall_0()); 
	    }
		lv_cv_0_0=ruleArithmeticTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLimitRule());
	        }
       		set(
       			$current, 
       			"cv",
        		lv_cv_0_0, 
        		"ArithmeticTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)
;









// Entry rule entryRuleSetExpression
entryRuleSetExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetExpressionRule()); }
	 iv_ruleSetExpression=ruleSetExpression 
	 { $current=$iv_ruleSetExpression.current; } 
	 EOF 
;

// Rule SetExpression
ruleSetExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetExpressionAccess().getSetAdditionParserRuleCall()); 
    }
    this_SetAddition_0=ruleSetAddition
    { 
        $current = $this_SetAddition_0.current; 
        afterParserOrEnumRuleCall();
    }

;







// Entry rule entryRuleTVars
entryRuleTVars returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTVarsRule()); }
	 iv_ruleTVars=ruleTVars 
	 { $current=$iv_ruleTVars.current; } 
	 EOF 
;

// Rule TVars
ruleTVars returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTVarsAccess().getCarTVarParserRuleCall_0_0()); 
	    }
		lv_car_0_0=ruleTVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTVarsRule());
	        }
       		set(
       			$current, 
       			"car",
        		lv_car_0_0, 
        		"TVar");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTVarsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTVarsAccess().getCdrTVarParserRuleCall_1_1_0()); 
	    }
		lv_cdr_2_0=ruleTVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTVarsRule());
	        }
       		add(
       			$current, 
       			"cdr",
        		lv_cdr_2_0, 
        		"TVar");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTVar
entryRuleTVar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTVarRule()); }
	 iv_ruleTVar=ruleTVar 
	 { $current=$iv_ruleTVar.current; } 
	 EOF 
;

// Rule TVar
ruleTVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTVarAccess().getVariableParserRuleCall_0()); 
    }
    this_Variable_0=ruleVariable
    { 
        $current = $this_Variable_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1='in' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTVarAccess().getInKeyword_1());
    }
this_ID_2=RULE_ID
    { 
    newLeafNode(this_ID_2, grammarAccess.getTVarAccess().getIDTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleSetAddition
entryRuleSetAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetAdditionRule()); }
	 iv_ruleSetAddition=ruleSetAddition 
	 { $current=$iv_ruleSetAddition.current; } 
	 EOF 
;

// Rule SetAddition
ruleSetAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetAdditionAccess().getSetMultiplicationParserRuleCall_0()); 
    }
    this_SetMultiplication_0=ruleSetMultiplication
    { 
        $current = $this_SetMultiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSetAdditionAccess().getSetAdditionLeftAction_1_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSetAdditionAccess().getPlusSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetAdditionAccess().getRightSetMultiplicationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleSetMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SetMultiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSetMultiplication
entryRuleSetMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetMultiplicationRule()); }
	 iv_ruleSetMultiplication=ruleSetMultiplication 
	 { $current=$iv_ruleSetMultiplication.current; } 
	 EOF 
;

// Rule SetMultiplication
ruleSetMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetMultiplicationAccess().getSetPrimaryParserRuleCall_0()); 
    }
    this_SetPrimary_0=ruleSetPrimary
    { 
        $current = $this_SetPrimary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSetMultiplicationAccess().getSetMultiplicationLeftAction_1_0(),
            $current);
    }
)(	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSetMultiplicationAccess().getAsteriskKeyword_1_1_0());
    }

    |	otherlv_3='\\' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSetMultiplicationAccess().getReverseSolidusKeyword_1_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSetMultiplicationAccess().getRightSetPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_4_0=ruleSetPrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"SetPrimary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSetPrimary
entryRuleSetPrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetPrimaryRule()); }
	 iv_ruleSetPrimary=ruleSetPrimary 
	 { $current=$iv_ruleSetPrimary.current; } 
	 EOF 
;

// Rule SetPrimary
ruleSetPrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetPrimaryAccess().getSetLiteralParserRuleCall_0()); 
    }
    this_SetLiteral_0=ruleSetLiteral
    { 
        $current = $this_SetLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSetPrimaryAccess().getLeftParenthesisKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetPrimaryAccess().getSetAdditionParserRuleCall_1_1()); 
    }
    this_SetAddition_2=ruleSetAddition
    { 
        $current = $this_SetAddition_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSetPrimaryAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleSetLiteral
entryRuleSetLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetLiteralRule()); }
	 iv_ruleSetLiteral=ruleSetLiteral 
	 { $current=$iv_ruleSetLiteral.current; } 
	 EOF 
;

// Rule SetLiteral
ruleSetLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_value_0_1=	'set' 
    {
        newLeafNode(lv_value_0_1, grammarAccess.getSetLiteralAccess().getValueSetKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetLiteralRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_1, null);
	    }

    |		lv_value_0_2=	'range' 
    {
        newLeafNode(lv_value_0_2, grammarAccess.getSetLiteralAccess().getValueRangeKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetLiteralRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_2, null);
	    }

    |		lv_value_0_3=	'set_constr' 
    {
        newLeafNode(lv_value_0_3, grammarAccess.getSetLiteralAccess().getValueSet_constrKeyword_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetLiteralRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_3, null);
	    }

)

)
)
;





// Entry rule entryRuleQuantifiedTerm
entryRuleQuantifiedTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuantifiedTermRule()); }
	 iv_ruleQuantifiedTerm=ruleQuantifiedTerm 
	 { $current=$iv_ruleQuantifiedTerm.current; } 
	 EOF 
;

// Rule QuantifiedTerm
ruleQuantifiedTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQuantifiedTermAccess().getQuantifierParserRuleCall_0()); 
    }
ruleQuantifier
    { 
        afterParserOrEnumRuleCall();
    }
this_ID_1=RULE_ID
    { 
    newLeafNode(this_ID_1, grammarAccess.getQuantifiedTermAccess().getIDTerminalRuleCall_1()); 
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQuantifiedTermAccess().getVariableParserRuleCall_2()); 
    }
    this_Variable_2=ruleVariable
    { 
        $current = $this_Variable_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleQuantifier
entryRuleQuantifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuantifierRule()); } 
	 iv_ruleQuantifier=ruleQuantifier 
	 { $current=$iv_ruleQuantifier.current.getText(); }  
	 EOF 
;

// Rule Quantifier
ruleQuantifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='every' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQuantifierAccess().getEveryKeyword_0()); 
    }

    |
	kw='some' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQuantifierAccess().getSomeKeyword_1()); 
    }
)
    ;









// Entry rule entryRulePredicateAtom
entryRulePredicateAtom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateAtomRule()); }
	 iv_rulePredicateAtom=rulePredicateAtom 
	 { $current=$iv_rulePredicateAtom.current; } 
	 EOF 
;

// Rule PredicateAtom
rulePredicateAtom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_fid_0_0=RULE_ID
		{
			newLeafNode(lv_fid_0_0, grammarAccess.getPredicateAtomAccess().getFidIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPredicateAtomRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fid",
        		lv_fid_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPredicateAtomAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAtomAccess().getTermsBasicTermsParserRuleCall_1_1_0()); 
	    }
		lv_terms_2_0=ruleBasicTerms		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateAtomRule());
	        }
       		set(
       			$current, 
       			"terms",
        		lv_terms_2_0, 
        		"BasicTerms");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPredicateAtomAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleBuiltInAtom
entryRuleBuiltInAtom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInAtomRule()); }
	 iv_ruleBuiltInAtom=ruleBuiltInAtom 
	 { $current=$iv_ruleBuiltInAtom.current; } 
	 EOF 
;

// Rule BuiltInAtom
ruleBuiltInAtom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBuiltInAtomAccess().getLhsBasicTermParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleBasicTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBuiltInAtomRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"BasicTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBuiltInAtomAccess().getOpAtomOpParserRuleCall_1_0()); 
	    }
		lv_op_1_0=ruleAtomOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBuiltInAtomRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"AtomOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBuiltInAtomAccess().getRhsBasicTermParserRuleCall_2_0()); 
	    }
		lv_rhs_2_0=ruleBasicTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBuiltInAtomRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_2_0, 
        		"BasicTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAtomOp
entryRuleAtomOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomOpRule()); } 
	 iv_ruleAtomOp=ruleAtomOp 
	 { $current=$iv_ruleAtomOp.current.getText(); }  
	 EOF 
;

// Rule AtomOp
ruleAtomOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAtomOpAccess().getGreaterThanSignKeyword_0()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAtomOpAccess().getLessThanSignKeyword_1()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAtomOpAccess().getGreaterThanSignEqualsSignKeyword_2()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAtomOpAccess().getLessThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAtomOpAccess().getEqualsSignKeyword_4()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAtomOpAccess().getExclamationMarkEqualsSignKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleSentence
entryRuleSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSentenceRule()); }
	 iv_ruleSentence=ruleSentence 
	 { $current=$iv_ruleSentence.current; } 
	 EOF 
;

// Rule Sentence
ruleSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getOrSentenceParserRuleCall()); 
    }
    this_OrSentence_0=ruleOrSentence
    { 
        $current = $this_OrSentence_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOrSentence
entryRuleOrSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrSentenceRule()); }
	 iv_ruleOrSentence=ruleOrSentence 
	 { $current=$iv_ruleOrSentence.current; } 
	 EOF 
;

// Rule OrSentence
ruleOrSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOrSentenceAccess().getAndSentenceParserRuleCall_0()); 
    }
    this_AndSentence_0=ruleAndSentence
    { 
        $current = $this_AndSentence_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrSentenceAccess().getOrSentenceLeftAction_1_0(),
            $current);
    }
)	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrSentenceAccess().getOrKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrSentenceAccess().getRightAndSentenceParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndSentence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrSentenceRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndSentence");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndSentence
entryRuleAndSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndSentenceRule()); }
	 iv_ruleAndSentence=ruleAndSentence 
	 { $current=$iv_ruleAndSentence.current; } 
	 EOF 
;

// Rule AndSentence
ruleAndSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAndSentenceAccess().getNotSentenceParserRuleCall_0()); 
    }
    this_NotSentence_0=ruleNotSentence
    { 
        $current = $this_NotSentence_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndSentenceAccess().getAndSentenceLeftAction_1_0(),
            $current);
    }
)	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndSentenceAccess().getAndKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndSentenceAccess().getRightNotSentenceParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleNotSentence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndSentenceRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"NotSentence");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNotSentence
entryRuleNotSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotSentenceRule()); }
	 iv_ruleNotSentence=ruleNotSentence 
	 { $current=$iv_ruleNotSentence.current; } 
	 EOF 
;

// Rule NotSentence
ruleNotSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNotSentenceAccess().getPrimarySentenceParserRuleCall_0()); 
    }
    this_PrimarySentence_0=rulePrimarySentence
    { 
        $current = $this_PrimarySentence_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='not' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNotSentenceAccess().getNotKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNotSentenceAccess().getPrimarySentenceParserRuleCall_1_1()); 
    }
    this_PrimarySentence_2=rulePrimarySentence
    { 
        $current = $this_PrimarySentence_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRulePrimarySentence
entryRulePrimarySentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimarySentenceRule()); }
	 iv_rulePrimarySentence=rulePrimarySentence 
	 { $current=$iv_rulePrimarySentence.current; } 
	 EOF 
;

// Rule PrimarySentence
rulePrimarySentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimarySentenceAccess().getSentenceLiteralParserRuleCall_0()); 
    }
    this_SentenceLiteral_0=ruleSentenceLiteral
    { 
        $current = $this_SentenceLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrimarySentenceAccess().getLeftParenthesisKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimarySentenceAccess().getOrSentenceParserRuleCall_1_1()); 
    }
    this_OrSentence_2=ruleOrSentence
    { 
        $current = $this_OrSentence_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimarySentenceAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleSentenceLiteral
entryRuleSentenceLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSentenceLiteralRule()); }
	 iv_ruleSentenceLiteral=ruleSentenceLiteral 
	 { $current=$iv_ruleSentenceLiteral.current; } 
	 EOF 
;

// Rule SentenceLiteral
ruleSentenceLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSentenceLiteralAccess().getPredicateAtomParserRuleCall()); 
    }
    this_PredicateAtom_0=rulePredicateAtom
    { 
        $current = $this_PredicateAtom_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleMaybeLiteral
entryRuleMaybeLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMaybeLiteralRule()); }
	 iv_ruleMaybeLiteral=ruleMaybeLiteral 
	 { $current=$iv_ruleMaybeLiteral.current; } 
	 EOF 
;

// Rule MaybeLiteral
ruleMaybeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='maybe' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMaybeLiteralAccess().getMaybeKeyword_0());
    }
this_ID_1=RULE_ID
    { 
    newLeafNode(this_ID_1, grammarAccess.getMaybeLiteralAccess().getIDTerminalRuleCall_1()); 
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMaybeLiteralAccess().getLeftParenthesisKeyword_2());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMaybeLiteralAccess().getBasicTermsParserRuleCall_3()); 
    }
    this_BasicTerms_3=ruleBasicTerms
    { 
        $current = $this_BasicTerms_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMaybeLiteralAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleCardinalityConstraint
entryRuleCardinalityConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCardinalityConstraintRule()); }
	 iv_ruleCardinalityConstraint=ruleCardinalityConstraint 
	 { $current=$iv_ruleCardinalityConstraint.current; } 
	 EOF 
;

// Rule CardinalityConstraint
ruleCardinalityConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCardinalityConstraintAccess().getLhsBoundParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCardinalityConstraintRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"Bound");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='<=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCardinalityConstraintAccess().getLessThanSignEqualsSignKeyword_1());
    }
	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCardinalityConstraintAccess().getVerticalLineKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCardinalityConstraintAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		lv_id_4_0=RULE_ID
		{
			newLeafNode(lv_id_4_0, grammarAccess.getCardinalityConstraintAccess().getIdIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCardinalityConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_4_0, 
        		"ID");
	    }

)
)	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCardinalityConstraintAccess().getLeftParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCardinalityConstraintAccess().getTermsBasicTermsParserRuleCall_6_0()); 
	    }
		lv_terms_6_0=ruleBasicTerms		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCardinalityConstraintRule());
	        }
       		set(
       			$current, 
       			"terms",
        		lv_terms_6_0, 
        		"BasicTerms");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCardinalityConstraintAccess().getRightParenthesisKeyword_7());
    }
	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getCardinalityConstraintAccess().getRightCurlyBracketKeyword_8());
    }
	otherlv_9='|' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCardinalityConstraintAccess().getVerticalLineKeyword_9());
    }
	otherlv_10='<=' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getCardinalityConstraintAccess().getLessThanSignEqualsSignKeyword_10());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCardinalityConstraintAccess().getRhsBoundParserRuleCall_11_0()); 
	    }
		lv_rhs_11_0=ruleBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCardinalityConstraintRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_11_0, 
        		"Bound");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBound
entryRuleBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoundRule()); }
	 iv_ruleBound=ruleBound 
	 { $current=$iv_ruleBound.current; } 
	 EOF 
;

// Rule Bound
ruleBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBoundAccess().getAvArithmeticTermParserRuleCall_0()); 
	    }
		lv_av_0_0=ruleArithmeticTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoundRule());
	        }
       		set(
       			$current, 
       			"av",
        		lv_av_0_0, 
        		"ArithmeticTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getHeadHeadParserRuleCall_0_0()); 
	    }
		lv_head_0_0=ruleHead		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"head",
        		lv_head_0_0, 
        		"Head");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='if' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getIfKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getBodySentenceParserRuleCall_1_1_0()); 
	    }
		lv_body_2_0=ruleSentence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"Sentence");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getFullStopKeyword_2());
    }
)
;





// Entry rule entryRuleHead
entryRuleHead returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHeadRule()); }
	 iv_ruleHead=ruleHead 
	 { $current=$iv_ruleHead.current; } 
	 EOF 
;

// Rule Head
ruleHead returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getHeadAccess().getMaybeLiteralParserRuleCall_0()); 
    }
    this_MaybeLiteral_0=ruleMaybeLiteral
    { 
        $current = $this_MaybeLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getHeadAccess().getCardinalityConstraintParserRuleCall_1()); 
    }
    this_CardinalityConstraint_1=ruleCardinalityConstraint
    { 
        $current = $this_CardinalityConstraint_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getRuleParserRuleCall_0()); 
    }
    this_Rule_0=ruleRule
    { 
        $current = $this_Rule_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getTypeDeclarationParserRuleCall_1()); 
    }
    this_TypeDeclaration_1=ruleTypeDeclaration
    { 
        $current = $this_TypeDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getConstantDeclarationParserRuleCall_2()); 
    }
    this_ConstantDeclaration_2=ruleConstantDeclaration
    { 
        $current = $this_ConstantDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





RULE_LID : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_UID : 'A'..'Z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


