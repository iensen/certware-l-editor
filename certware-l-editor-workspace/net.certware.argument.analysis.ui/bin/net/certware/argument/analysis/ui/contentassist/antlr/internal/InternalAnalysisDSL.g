/*
 * generated by Xtext
 */
grammar InternalAnalysisDSL;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package net.certware.argument.analysis.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package net.certware.argument.analysis.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import net.certware.argument.analysis.services.AnalysisDSLGrammarAccess;

}

@parser::members {
 
 	private AnalysisDSLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AnalysisDSLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleOutput
entryRuleOutput 
:
{ before(grammarAccess.getOutputRule()); }
	 ruleOutput
{ after(grammarAccess.getOutputRule()); } 
	 EOF 
;

// Rule Output
ruleOutput
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOutputAccess().getGroup()); }
(rule__Output__Group__0)
{ after(grammarAccess.getOutputAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLine
entryRuleLine 
:
{ before(grammarAccess.getLineRule()); }
	 ruleLine
{ after(grammarAccess.getLineRule()); } 
	 EOF 
;

// Rule Line
ruleLine
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getLineAccess().getItemsAssignment()); }
(rule__Line__ItemsAssignment)
{ after(grammarAccess.getLineAccess().getItemsAssignment()); }
)
(
{ before(grammarAccess.getLineAccess().getItemsAssignment()); }
(rule__Line__ItemsAssignment)*
{ after(grammarAccess.getLineAccess().getItemsAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassicLiteral
entryRuleClassicLiteral 
:
{ before(grammarAccess.getClassicLiteralRule()); }
	 ruleClassicLiteral
{ after(grammarAccess.getClassicLiteralRule()); } 
	 EOF 
;

// Rule ClassicLiteral
ruleClassicLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassicLiteralAccess().getGroup()); }
(rule__ClassicLiteral__Group__0)
{ after(grammarAccess.getClassicLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtom
entryRuleAtom 
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomAccess().getGroup()); }
(rule__Atom__Group__0)
{ after(grammarAccess.getAtomAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePREDICATE_NAME
entryRulePREDICATE_NAME 
:
{ before(grammarAccess.getPREDICATE_NAMERule()); }
	 rulePREDICATE_NAME
{ after(grammarAccess.getPREDICATE_NAMERule()); } 
	 EOF 
;

// Rule PREDICATE_NAME
rulePREDICATE_NAME
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPREDICATE_NAMEAccess().getIDENTIFIERTerminalRuleCall()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getPREDICATE_NAMEAccess().getIDENTIFIERTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerms
entryRuleTerms 
:
{ before(grammarAccess.getTermsRule()); }
	 ruleTerms
{ after(grammarAccess.getTermsRule()); } 
	 EOF 
;

// Rule Terms
ruleTerms
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermsAccess().getGroup()); }
(rule__Terms__Group__0)
{ after(grammarAccess.getTermsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getAlternatives()); }
(rule__Term__Alternatives)
{ after(grammarAccess.getTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCONSTANT_SYMBOL
entryRuleCONSTANT_SYMBOL 
:
{ before(grammarAccess.getCONSTANT_SYMBOLRule()); }
	 ruleCONSTANT_SYMBOL
{ after(grammarAccess.getCONSTANT_SYMBOLRule()); } 
	 EOF 
;

// Rule CONSTANT_SYMBOL
ruleCONSTANT_SYMBOL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCONSTANT_SYMBOLAccess().getIDENTIFIERTerminalRuleCall()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getCONSTANT_SYMBOLAccess().getIDENTIFIERTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFUNCTIONAL_SYMBOL
entryRuleFUNCTIONAL_SYMBOL 
:
{ before(grammarAccess.getFUNCTIONAL_SYMBOLRule()); }
	 ruleFUNCTIONAL_SYMBOL
{ after(grammarAccess.getFUNCTIONAL_SYMBOLRule()); } 
	 EOF 
;

// Rule FUNCTIONAL_SYMBOL
ruleFUNCTIONAL_SYMBOL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFUNCTIONAL_SYMBOLAccess().getIDENTIFIERTerminalRuleCall()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getFUNCTIONAL_SYMBOLAccess().getIDENTIFIERTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Output__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getSATISFIABLETerminalRuleCall_1_0()); }
	RULE_SATISFIABLE
{ after(grammarAccess.getOutputAccess().getSATISFIABLETerminalRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getOutputAccess().getUNSATISFIABLETerminalRuleCall_1_1()); }
	RULE_UNSATISFIABLE
{ after(grammarAccess.getOutputAccess().getUNSATISFIABLETerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getCsAssignment_0()); }
(rule__Term__CsAssignment_0)
{ after(grammarAccess.getTermAccess().getCsAssignment_0()); }
)

    |(
{ before(grammarAccess.getTermAccess().getGroup_1()); }
(rule__Term__Group_1__0)
{ after(grammarAccess.getTermAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getTermAccess().getGroup_2()); }
(rule__Term__Group_2__0)
{ after(grammarAccess.getTermAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Output__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Output__Group__0__Impl
	rule__Output__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getLinesAssignment_0()); }
(rule__Output__LinesAssignment_0)*
{ after(grammarAccess.getOutputAccess().getLinesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Output__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getAlternatives_1()); }
(rule__Output__Alternatives_1)
{ after(grammarAccess.getOutputAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClassicLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassicLiteral__Group__0__Impl
	rule__ClassicLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassicLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassicLiteralAccess().getNegAssignment_0()); }
(rule__ClassicLiteral__NegAssignment_0)?
{ after(grammarAccess.getClassicLiteralAccess().getNegAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassicLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassicLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassicLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassicLiteralAccess().getAtomAssignment_1()); }
(rule__ClassicLiteral__AtomAssignment_1)
{ after(grammarAccess.getClassicLiteralAccess().getAtomAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atom__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group__0__Impl
	rule__Atom__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getNameAssignment_0()); }
(rule__Atom__NameAssignment_0)
{ after(grammarAccess.getAtomAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getGroup_1()); }
(rule__Atom__Group_1__0)?
{ after(grammarAccess.getAtomAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atom__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_1__0__Impl
	rule__Atom__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_1__1__Impl
	rule__Atom__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getTermsAssignment_1_1()); }
(rule__Atom__TermsAssignment_1_1)?
{ after(grammarAccess.getAtomAccess().getTermsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Terms__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terms__Group__0__Impl
	rule__Terms__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terms__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermsAccess().getCarAssignment_0()); }
(rule__Terms__CarAssignment_0)
{ after(grammarAccess.getTermsAccess().getCarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Terms__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terms__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terms__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermsAccess().getGroup_1()); }
(rule__Terms__Group_1__0)*
{ after(grammarAccess.getTermsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Terms__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terms__Group_1__0__Impl
	rule__Terms__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terms__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermsAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getTermsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Terms__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terms__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terms__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermsAccess().getCdrAssignment_1_1()); }
(rule__Terms__CdrAssignment_1_1)
{ after(grammarAccess.getTermsAccess().getCdrAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__0__Impl
	rule__Term__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getSignAssignment_1_0()); }
(rule__Term__SignAssignment_1_0)?
{ after(grammarAccess.getTermAccess().getSignAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getNAssignment_1_1()); }
(rule__Term__NAssignment_1_1)
{ after(grammarAccess.getTermAccess().getNAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_2__0__Impl
	rule__Term__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getFsAssignment_2_0()); }
(rule__Term__FsAssignment_2_0)
{ after(grammarAccess.getTermAccess().getFsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_2__1__Impl
	rule__Term__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getLeftParenthesisKeyword_2_1()); }

	'(' 

{ after(grammarAccess.getTermAccess().getLeftParenthesisKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_2__2__Impl
	rule__Term__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getTermsAssignment_2_2()); }
(rule__Term__TermsAssignment_2_2)
{ after(grammarAccess.getTermAccess().getTermsAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getRightParenthesisKeyword_2_3()); }

	')' 

{ after(grammarAccess.getTermAccess().getRightParenthesisKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Output__LinesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getLinesLineParserRuleCall_0_0()); }
	ruleLine{ after(grammarAccess.getOutputAccess().getLinesLineParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Line__ItemsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLineAccess().getItemsClassicLiteralParserRuleCall_0()); }
	ruleClassicLiteral{ after(grammarAccess.getLineAccess().getItemsClassicLiteralParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassicLiteral__NegAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassicLiteralAccess().getNegHyphenMinusKeyword_0_0()); }
(
{ before(grammarAccess.getClassicLiteralAccess().getNegHyphenMinusKeyword_0_0()); }

	'-' 

{ after(grammarAccess.getClassicLiteralAccess().getNegHyphenMinusKeyword_0_0()); }
)

{ after(grammarAccess.getClassicLiteralAccess().getNegHyphenMinusKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassicLiteral__AtomAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassicLiteralAccess().getAtomAtomParserRuleCall_1_0()); }
	ruleAtom{ after(grammarAccess.getClassicLiteralAccess().getAtomAtomParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getNamePREDICATE_NAMEParserRuleCall_0_0()); }
	rulePREDICATE_NAME{ after(grammarAccess.getAtomAccess().getNamePREDICATE_NAMEParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__TermsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getTermsTermsParserRuleCall_1_1_0()); }
	ruleTerms{ after(grammarAccess.getAtomAccess().getTermsTermsParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Terms__CarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermsAccess().getCarTermParserRuleCall_0_0()); }
	ruleTerm{ after(grammarAccess.getTermsAccess().getCarTermParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Terms__CdrAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermsAccess().getCdrTermParserRuleCall_1_1_0()); }
	ruleTerm{ after(grammarAccess.getTermsAccess().getCdrTermParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__CsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getCsCONSTANT_SYMBOLParserRuleCall_0_0()); }
	ruleCONSTANT_SYMBOL{ after(grammarAccess.getTermAccess().getCsCONSTANT_SYMBOLParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__SignAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getSignHyphenMinusKeyword_1_0_0()); }
(
{ before(grammarAccess.getTermAccess().getSignHyphenMinusKeyword_1_0_0()); }

	'-' 

{ after(grammarAccess.getTermAccess().getSignHyphenMinusKeyword_1_0_0()); }
)

{ after(grammarAccess.getTermAccess().getSignHyphenMinusKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__NAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getNNUMBERTerminalRuleCall_1_1_0()); }
	RULE_NUMBER{ after(grammarAccess.getTermAccess().getNNUMBERTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__FsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getFsFUNCTIONAL_SYMBOLParserRuleCall_2_0_0()); }
	ruleFUNCTIONAL_SYMBOL{ after(grammarAccess.getTermAccess().getFsFUNCTIONAL_SYMBOLParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__TermsAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getTermsTermsParserRuleCall_2_2_0()); }
	ruleTerms{ after(grammarAccess.getTermAccess().getTermsTermsParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_NUMBER : ('0'|'1'..'9' ('0'..'9')*);

RULE_IDENTIFIER : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_SATISFIABLE : 'SATISFIABLE';

RULE_UNSATISFIABLE : 'UNSATISFIABLE';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


