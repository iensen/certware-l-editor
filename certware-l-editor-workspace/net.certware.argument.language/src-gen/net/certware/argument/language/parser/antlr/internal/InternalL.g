/*
 * generated by Xtext
 */
grammar InternalL;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package net.certware.argument.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.certware.argument.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import net.certware.argument.language.services.LGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private LGrammarAccess grammarAccess;
 	
    public InternalLParser(TokenStream input, LGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected LGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_0()); 
	    }
		lv_statements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"net.certware.argument.language.L.Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleBasicTerm
entryRuleBasicTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicTermRule()); }
	 iv_ruleBasicTerm=ruleBasicTerm 
	 { $current=$iv_ruleBasicTerm.current; } 
	 EOF 
;

// Rule BasicTerm
ruleBasicTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBasicTermAccess().getTypedVariableParserRuleCall_0()); 
    }
    this_TypedVariable_0=ruleTypedVariable
    { 
        $current = $this_TypedVariable_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBasicTermAccess().getArithmeticTermParserRuleCall_1()); 
    }
    this_ArithmeticTerm_1=ruleArithmeticTerm
    { 
        $current = $this_ArithmeticTerm_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBasicTermAccess().getFunctionalTermParserRuleCall_2()); 
    }
    this_FunctionalTerm_2=ruleFunctionalTerm
    { 
        $current = $this_FunctionalTerm_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_identifier_0_0=RULE_UID
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getVariableAccess().getIdentifierUIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"net.certware.argument.language.L.UID");
	    }

)
)
;





// Entry rule entryRuleTypedVariable
entryRuleTypedVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedVariableRule()); }
	 iv_ruleTypedVariable=ruleTypedVariable 
	 { $current=$iv_ruleTypedVariable.current; } 
	 EOF 
;

// Rule TypedVariable
ruleTypedVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_LID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTypedVariableAccess().getNameLIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypedVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"net.certware.argument.language.L.LID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedVariableAccess().getVarVariableParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedVariableRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"net.certware.argument.language.L.Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleArithmeticTerm
entryRuleArithmeticTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithmeticTermRule()); }
	 iv_ruleArithmeticTerm=ruleArithmeticTerm 
	 { $current=$iv_ruleArithmeticTerm.current; } 
	 EOF 
;

// Rule ArithmeticTerm
ruleArithmeticTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArithmeticTermAccess().getAdditionParserRuleCall()); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getAdditionLhsAction_1_0(),
            $current);
    }
)(	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1_0());
    }

    |	otherlv_3='-' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getRhsMultiplicationParserRuleCall_1_2_0()); 
	    }
		lv_rhs_4_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_4_0, 
        		"net.certware.argument.language.L.Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getMultiplicationLhsAction_1_0(),
            $current);
    }
)(	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1_0());
    }

    |	otherlv_3='/' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_1_1());
    }

    |	otherlv_4='%' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_1_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRhsPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_rhs_5_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_5_0, 
        		"net.certware.argument.language.L.Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getTermArithmeticLiteralParserRuleCall_0_0()); 
	    }
		lv_term_0_0=ruleArithmeticLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_0_0, 
        		"net.certware.argument.language.L.ArithmeticLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getTermAdditionParserRuleCall_1_1_0()); 
	    }
		lv_term_2_0=ruleAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_2_0, 
        		"net.certware.argument.language.L.Addition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleArithmeticLiteral
entryRuleArithmeticLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithmeticLiteralRule()); }
	 iv_ruleArithmeticLiteral=ruleArithmeticLiteral 
	 { $current=$iv_ruleArithmeticLiteral.current; } 
	 EOF 
;

// Rule ArithmeticLiteral
ruleArithmeticLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArithmeticLiteralAccess().getVVariableParserRuleCall_0_0()); 
	    }
		lv_v_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmeticLiteralRule());
	        }
       		set(
       			$current, 
       			"v",
        		lv_v_0_0, 
        		"net.certware.argument.language.L.Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmeticLiteralAccess().getTvTypedVariableParserRuleCall_1_0()); 
	    }
		lv_tv_1_0=ruleTypedVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmeticLiteralRule());
	        }
       		set(
       			$current, 
       			"tv",
        		lv_tv_1_0, 
        		"net.certware.argument.language.L.TypedVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_const_2_0=RULE_LID
		{
			newLeafNode(lv_const_2_0, grammarAccess.getArithmeticLiteralAccess().getConstLIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"const",
        		lv_const_2_0, 
        		"net.certware.argument.language.L.LID");
	    }

)
)
    |(
(
		lv_value_3_0=RULE_NUMERIC_CONSTANT
		{
			newLeafNode(lv_value_3_0, grammarAccess.getArithmeticLiteralAccess().getValueNUMERIC_CONSTANTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArithmeticLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"net.certware.argument.language.L.NUMERIC_CONSTANT");
	    }

)
))
;





// Entry rule entryRuleGroundArithmeticTerm
entryRuleGroundArithmeticTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroundArithmeticTermRule()); }
	 iv_ruleGroundArithmeticTerm=ruleGroundArithmeticTerm 
	 { $current=$iv_ruleGroundArithmeticTerm.current; } 
	 EOF 
;

// Rule GroundArithmeticTerm
ruleGroundArithmeticTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroundArithmeticTermAccess().getGroundAdditionParserRuleCall()); 
    }
    this_GroundAddition_0=ruleGroundAddition
    { 
        $current = $this_GroundAddition_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleGroundAddition
entryRuleGroundAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroundAdditionRule()); }
	 iv_ruleGroundAddition=ruleGroundAddition 
	 { $current=$iv_ruleGroundAddition.current; } 
	 EOF 
;

// Rule GroundAddition
ruleGroundAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroundAdditionAccess().getGroundMultiplicationParserRuleCall_0()); 
    }
    this_GroundMultiplication_0=ruleGroundMultiplication
    { 
        $current = $this_GroundMultiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGroundAdditionAccess().getGroundAdditionLhsAction_1_0(),
            $current);
    }
)(	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroundAdditionAccess().getPlusSignKeyword_1_1_0());
    }

    |	otherlv_3='-' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGroundAdditionAccess().getHyphenMinusKeyword_1_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGroundAdditionAccess().getRhsGroundMultiplicationParserRuleCall_1_2_0()); 
	    }
		lv_rhs_4_0=ruleGroundMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroundAdditionRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_4_0, 
        		"net.certware.argument.language.L.GroundMultiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGroundMultiplication
entryRuleGroundMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroundMultiplicationRule()); }
	 iv_ruleGroundMultiplication=ruleGroundMultiplication 
	 { $current=$iv_ruleGroundMultiplication.current; } 
	 EOF 
;

// Rule GroundMultiplication
ruleGroundMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroundMultiplicationAccess().getGroundPrimaryParserRuleCall_0()); 
    }
    this_GroundPrimary_0=ruleGroundPrimary
    { 
        $current = $this_GroundPrimary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGroundMultiplicationAccess().getGroundMultiplicationLhsAction_1_0(),
            $current);
    }
)(	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroundMultiplicationAccess().getAsteriskKeyword_1_1_0());
    }

    |	otherlv_3='/' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGroundMultiplicationAccess().getSolidusKeyword_1_1_1());
    }

    |	otherlv_4='%' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGroundMultiplicationAccess().getPercentSignKeyword_1_1_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGroundMultiplicationAccess().getRhsPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_rhs_5_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroundMultiplicationRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_5_0, 
        		"net.certware.argument.language.L.Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGroundPrimary
entryRuleGroundPrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroundPrimaryRule()); }
	 iv_ruleGroundPrimary=ruleGroundPrimary 
	 { $current=$iv_ruleGroundPrimary.current; } 
	 EOF 
;

// Rule GroundPrimary
ruleGroundPrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGroundPrimaryAccess().getTermGroundArithmeticLiteralParserRuleCall_0_0()); 
	    }
		lv_term_0_0=ruleGroundArithmeticLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroundPrimaryRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_0_0, 
        		"net.certware.argument.language.L.GroundArithmeticLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGroundPrimaryAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroundPrimaryAccess().getTermAdditionParserRuleCall_1_1_0()); 
	    }
		lv_term_2_0=ruleAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroundPrimaryRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_2_0, 
        		"net.certware.argument.language.L.Addition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGroundPrimaryAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleGroundArithmeticLiteral
entryRuleGroundArithmeticLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroundArithmeticLiteralRule()); }
	 iv_ruleGroundArithmeticLiteral=ruleGroundArithmeticLiteral 
	 { $current=$iv_ruleGroundArithmeticLiteral.current; } 
	 EOF 
;

// Rule GroundArithmeticLiteral
ruleGroundArithmeticLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_identifier_0_0=RULE_LID
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getGroundArithmeticLiteralAccess().getIdentifierLIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGroundArithmeticLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"net.certware.argument.language.L.LID");
	    }

)
)
    |(
(
		lv_value_1_0=RULE_NUMERIC_CONSTANT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGroundArithmeticLiteralAccess().getValueNUMERIC_CONSTANTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGroundArithmeticLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"net.certware.argument.language.L.NUMERIC_CONSTANT");
	    }

)
))
;





// Entry rule entryRuleFunctionalTerm
entryRuleFunctionalTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionalTermRule()); }
	 iv_ruleFunctionalTerm=ruleFunctionalTerm 
	 { $current=$iv_ruleFunctionalTerm.current; } 
	 EOF 
;

// Rule FunctionalTerm
ruleFunctionalTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LID_0=RULE_LID
    { 
    newLeafNode(this_LID_0, grammarAccess.getFunctionalTermAccess().getLIDTerminalRuleCall_0()); 
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionalTermAccess().getLeftParenthesisKeyword_1());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFunctionalTermAccess().getTermsParserRuleCall_2()); 
    }
    this_Terms_2=ruleTerms
    { 
        $current = $this_Terms_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionalTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleGroundFunctionalTerm
entryRuleGroundFunctionalTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroundFunctionalTermRule()); }
	 iv_ruleGroundFunctionalTerm=ruleGroundFunctionalTerm 
	 { $current=$iv_ruleGroundFunctionalTerm.current; } 
	 EOF 
;

// Rule GroundFunctionalTerm
ruleGroundFunctionalTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LID_0=RULE_LID
    { 
    newLeafNode(this_LID_0, grammarAccess.getGroundFunctionalTermAccess().getLIDTerminalRuleCall_0()); 
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGroundFunctionalTermAccess().getLeftParenthesisKeyword_1());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroundFunctionalTermAccess().getGroundTermsParserRuleCall_2()); 
    }
    this_GroundTerms_2=ruleGroundTerms
    { 
        $current = $this_GroundTerms_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGroundFunctionalTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleBasicTerms
entryRuleBasicTerms returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicTermsRule()); }
	 iv_ruleBasicTerms=ruleBasicTerms 
	 { $current=$iv_ruleBasicTerms.current; } 
	 EOF 
;

// Rule BasicTerms
ruleBasicTerms returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBasicTermsAccess().getCarBasicTermParserRuleCall_0_0()); 
	    }
		lv_car_0_0=ruleBasicTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicTermsRule());
	        }
       		set(
       			$current, 
       			"car",
        		lv_car_0_0, 
        		"net.certware.argument.language.L.BasicTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBasicTermsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicTermsAccess().getCdrBasicTermParserRuleCall_1_1_0()); 
	    }
		lv_cdr_2_0=ruleBasicTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicTermsRule());
	        }
       		add(
       			$current, 
       			"cdr",
        		lv_cdr_2_0, 
        		"net.certware.argument.language.L.BasicTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGroundTerms
entryRuleGroundTerms returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroundTermsRule()); }
	 iv_ruleGroundTerms=ruleGroundTerms 
	 { $current=$iv_ruleGroundTerms.current; } 
	 EOF 
;

// Rule GroundTerms
ruleGroundTerms returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGroundTermsAccess().getCarGroundTermParserRuleCall_0_0()); 
	    }
		lv_car_0_0=ruleGroundTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroundTermsRule());
	        }
       		set(
       			$current, 
       			"car",
        		lv_car_0_0, 
        		"net.certware.argument.language.L.GroundTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGroundTermsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroundTermsAccess().getCdrGroundTermParserRuleCall_1_1_0()); 
	    }
		lv_cdr_2_0=ruleGroundTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroundTermsRule());
	        }
       		add(
       			$current, 
       			"cdr",
        		lv_cdr_2_0, 
        		"net.certware.argument.language.L.GroundTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGroundTerm
entryRuleGroundTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroundTermRule()); }
	 iv_ruleGroundTerm=ruleGroundTerm 
	 { $current=$iv_ruleGroundTerm.current; } 
	 EOF 
;

// Rule GroundTerm
ruleGroundTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroundTermAccess().getGroundArithmeticTermParserRuleCall_0()); 
    }
    this_GroundArithmeticTerm_0=ruleGroundArithmeticTerm
    { 
        $current = $this_GroundArithmeticTerm_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroundTermAccess().getGroundFunctionalTermParserRuleCall_1()); 
    }
    this_GroundFunctionalTerm_1=ruleGroundFunctionalTerm
    { 
        $current = $this_GroundFunctionalTerm_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleQuantifiedTerm
entryRuleQuantifiedTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuantifiedTermRule()); }
	 iv_ruleQuantifiedTerm=ruleQuantifiedTerm 
	 { $current=$iv_ruleQuantifiedTerm.current; } 
	 EOF 
;

// Rule QuantifiedTerm
ruleQuantifiedTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQuantifiedTermAccess().getUniversalQuantifiedTermParserRuleCall_0()); 
    }
    this_UniversalQuantifiedTerm_0=ruleUniversalQuantifiedTerm
    { 
        $current = $this_UniversalQuantifiedTerm_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQuantifiedTermAccess().getExistentialQuantifiedTermParserRuleCall_1()); 
    }
    this_ExistentialQuantifiedTerm_1=ruleExistentialQuantifiedTerm
    { 
        $current = $this_ExistentialQuantifiedTerm_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUniversalQuantifiedTerm
entryRuleUniversalQuantifiedTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUniversalQuantifiedTermRule()); }
	 iv_ruleUniversalQuantifiedTerm=ruleUniversalQuantifiedTerm 
	 { $current=$iv_ruleUniversalQuantifiedTerm.current; } 
	 EOF 
;

// Rule UniversalQuantifiedTerm
ruleUniversalQuantifiedTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='every' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUniversalQuantifiedTermAccess().getEveryKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUniversalQuantifiedTermAccess().getNameTypeIdParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleTypeId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUniversalQuantifiedTermRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"net.certware.argument.language.L.TypeId");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExistentialQuantifiedTerm
entryRuleExistentialQuantifiedTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExistentialQuantifiedTermRule()); }
	 iv_ruleExistentialQuantifiedTerm=ruleExistentialQuantifiedTerm 
	 { $current=$iv_ruleExistentialQuantifiedTerm.current; } 
	 EOF 
;

// Rule ExistentialQuantifiedTerm
ruleExistentialQuantifiedTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='some' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExistentialQuantifiedTermAccess().getSomeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExistentialQuantifiedTermAccess().getNameTypeIdParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleTypeId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExistentialQuantifiedTermRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"net.certware.argument.language.L.TypeId");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTermAccess().getBasicTermParserRuleCall_0()); 
    }
    this_BasicTerm_0=ruleBasicTerm
    { 
        $current = $this_BasicTerm_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTermAccess().getQuantifiedTermParserRuleCall_1()); 
    }
    this_QuantifiedTerm_1=ruleQuantifiedTerm
    { 
        $current = $this_QuantifiedTerm_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTerms
entryRuleTerms returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermsRule()); }
	 iv_ruleTerms=ruleTerms 
	 { $current=$iv_ruleTerms.current; } 
	 EOF 
;

// Rule Terms
ruleTerms returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTermsAccess().getCarTermParserRuleCall_0_0()); 
	    }
		lv_car_0_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermsRule());
	        }
       		set(
       			$current, 
       			"car",
        		lv_car_0_0, 
        		"net.certware.argument.language.L.Term");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTermsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermsAccess().getCdrTermParserRuleCall_1_1_0()); 
	    }
		lv_cdr_2_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermsRule());
	        }
       		add(
       			$current, 
       			"cdr",
        		lv_cdr_2_0, 
        		"net.certware.argument.language.L.Term");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConstantDeclaration
entryRuleConstantDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDeclarationRule()); }
	 iv_ruleConstantDeclaration=ruleConstantDeclaration 
	 { $current=$iv_ruleConstantDeclaration.current; } 
	 EOF 
;

// Rule ConstantDeclaration
ruleConstantDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='const' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantDeclarationAccess().getConstKeyword_0());
    }
(
(
		lv_name_1_0=RULE_LID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstantDeclarationAccess().getNameLIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"net.certware.argument.language.L.LID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantDeclarationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getCvGroundArithmeticTermParserRuleCall_3_0()); 
	    }
		lv_cv_3_0=ruleGroundArithmeticTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"cv",
        		lv_cv_3_0, 
        		"net.certware.argument.language.L.GroundArithmeticTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstantDeclarationAccess().getFullStopKeyword_4());
    }
)
;





// Entry rule entryRuleTypeId
entryRuleTypeId returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeIdRule()); }
	 iv_ruleTypeId=ruleTypeId 
	 { $current=$iv_ruleTypeId.current; } 
	 EOF 
;

// Rule TypeId
ruleTypeId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_LID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTypeIdAccess().getNameLIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeIdRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"net.certware.argument.language.L.LID");
	    }

)
)
;





// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	 iv_ruleTypeDeclaration=ruleTypeDeclaration 
	 { $current=$iv_ruleTypeDeclaration.current; } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeDeclarationAccess().getTypeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getNameTypeIdParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleTypeId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"net.certware.argument.language.L.TypeId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getExpSetExpressionParserRuleCall_3_0()); 
	    }
		lv_exp_3_0=ruleSetExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_3_0, 
        		"net.certware.argument.language.L.SetExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeDeclarationAccess().getFullStopKeyword_4());
    }
)
;





// Entry rule entryRuleLimit
entryRuleLimit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLimitRule()); }
	 iv_ruleLimit=ruleLimit 
	 { $current=$iv_ruleLimit.current; } 
	 EOF 
;

// Rule Limit
ruleLimit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLimitAccess().getCvGroundArithmeticTermParserRuleCall_0()); 
	    }
		lv_cv_0_0=ruleGroundArithmeticTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLimitRule());
	        }
       		set(
       			$current, 
       			"cv",
        		lv_cv_0_0, 
        		"net.certware.argument.language.L.GroundArithmeticTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleSet
entryRuleSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetRule()); }
	 iv_ruleSet=ruleSet 
	 { $current=$iv_ruleSet.current; } 
	 EOF 
;

// Rule Set
ruleSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_lhs_0_0=	'{' 
    {
        newLeafNode(lv_lhs_0_0, grammarAccess.getSetAccess().getLhsLeftCurlyBracketKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetRule());
	        }
       		setWithLastConsumed($current, "lhs", lv_lhs_0_0, "{");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSetAccess().getTermsGroundTermsParserRuleCall_1_0()); 
	    }
		lv_terms_1_0=ruleGroundTerms		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetRule());
	        }
       		set(
       			$current, 
       			"terms",
        		lv_terms_1_0, 
        		"net.certware.argument.language.L.GroundTerms");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSetAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	 iv_ruleRange=ruleRange 
	 { $current=$iv_ruleRange.current; } 
	 EOF 
;

// Rule Range
ruleRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRangeAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getLhsLimitParserRuleCall_1_0()); 
	    }
		lv_lhs_1_0=ruleLimit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_1_0, 
        		"net.certware.argument.language.L.Limit");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRangeAccess().getFullStopKeyword_2());
    }
	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRangeAccess().getFullStopKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getRhsLimitParserRuleCall_4_0()); 
	    }
		lv_rhs_4_0=ruleLimit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_4_0, 
        		"net.certware.argument.language.L.Limit");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRangeAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleSetExpression
entryRuleSetExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetExpressionRule()); }
	 iv_ruleSetExpression=ruleSetExpression 
	 { $current=$iv_ruleSetExpression.current; } 
	 EOF 
;

// Rule SetExpression
ruleSetExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetExpressionAccess().getSetAdditionParserRuleCall()); 
    }
    this_SetAddition_0=ruleSetAddition
    { 
        $current = $this_SetAddition_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleSetConstruct
entryRuleSetConstruct returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetConstructRule()); }
	 iv_ruleSetConstruct=ruleSetConstruct 
	 { $current=$iv_ruleSetConstruct.current; } 
	 EOF 
;

// Rule SetConstruct
ruleSetConstruct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSetConstructAccess().getLhsBasicTermParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleBasicTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetConstructRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"net.certware.argument.language.L.BasicTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='where' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSetConstructAccess().getWhereKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetConstructAccess().getRhsTVarsParserRuleCall_2_0()); 
	    }
		lv_rhs_2_0=ruleTVars		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetConstructRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_2_0, 
        		"net.certware.argument.language.L.TVars");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTVars
entryRuleTVars returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTVarsRule()); }
	 iv_ruleTVars=ruleTVars 
	 { $current=$iv_ruleTVars.current; } 
	 EOF 
;

// Rule TVars
ruleTVars returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTVarsAccess().getCarTVarParserRuleCall_0_0()); 
	    }
		lv_car_0_0=ruleTVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTVarsRule());
	        }
       		set(
       			$current, 
       			"car",
        		lv_car_0_0, 
        		"net.certware.argument.language.L.TVar");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTVarsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTVarsAccess().getCdrTVarParserRuleCall_1_1_0()); 
	    }
		lv_cdr_2_0=ruleTVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTVarsRule());
	        }
       		add(
       			$current, 
       			"cdr",
        		lv_cdr_2_0, 
        		"net.certware.argument.language.L.TVar");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTVar
entryRuleTVar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTVarRule()); }
	 iv_ruleTVar=ruleTVar 
	 { $current=$iv_ruleTVar.current; } 
	 EOF 
;

// Rule TVar
ruleTVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTVarAccess().getVarVariableParserRuleCall_0_0()); 
	    }
		lv_var_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTVarRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"net.certware.argument.language.L.Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='in' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTVarAccess().getInKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTVarAccess().getIdTypeIdParserRuleCall_2_0()); 
	    }
		lv_id_2_0=ruleTypeId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTVarRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"net.certware.argument.language.L.TypeId");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSetAddition
entryRuleSetAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetAdditionRule()); }
	 iv_ruleSetAddition=ruleSetAddition 
	 { $current=$iv_ruleSetAddition.current; } 
	 EOF 
;

// Rule SetAddition
ruleSetAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetAdditionAccess().getSetMultiplicationParserRuleCall_0()); 
    }
    this_SetMultiplication_0=ruleSetMultiplication
    { 
        $current = $this_SetMultiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSetAdditionAccess().getSetAdditionLeftAction_1_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSetAdditionAccess().getPlusSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetAdditionAccess().getRightSetMultiplicationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleSetMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"net.certware.argument.language.L.SetMultiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSetMultiplication
entryRuleSetMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetMultiplicationRule()); }
	 iv_ruleSetMultiplication=ruleSetMultiplication 
	 { $current=$iv_ruleSetMultiplication.current; } 
	 EOF 
;

// Rule SetMultiplication
ruleSetMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetMultiplicationAccess().getSetPrimaryParserRuleCall_0()); 
    }
    this_SetPrimary_0=ruleSetPrimary
    { 
        $current = $this_SetPrimary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSetMultiplicationAccess().getSetMultiplicationLeftAction_1_0(),
            $current);
    }
)(	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSetMultiplicationAccess().getAsteriskKeyword_1_1_0());
    }

    |	otherlv_3='\\' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSetMultiplicationAccess().getReverseSolidusKeyword_1_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSetMultiplicationAccess().getRightSetPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_4_0=ruleSetPrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"net.certware.argument.language.L.SetPrimary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSetPrimary
entryRuleSetPrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetPrimaryRule()); }
	 iv_ruleSetPrimary=ruleSetPrimary 
	 { $current=$iv_ruleSetPrimary.current; } 
	 EOF 
;

// Rule SetPrimary
ruleSetPrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetPrimaryAccess().getSetLiteralParserRuleCall_0()); 
    }
    this_SetLiteral_0=ruleSetLiteral
    { 
        $current = $this_SetLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSetPrimaryAccess().getLeftParenthesisKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetPrimaryAccess().getSetAdditionParserRuleCall_1_1()); 
    }
    this_SetAddition_2=ruleSetAddition
    { 
        $current = $this_SetAddition_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSetPrimaryAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleSetLiteral
entryRuleSetLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetLiteralRule()); }
	 iv_ruleSetLiteral=ruleSetLiteral 
	 { $current=$iv_ruleSetLiteral.current; } 
	 EOF 
;

// Rule SetLiteral
ruleSetLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetLiteralAccess().getSetParserRuleCall_0()); 
    }
    this_Set_0=ruleSet
    { 
        $current = $this_Set_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetLiteralAccess().getRangeParserRuleCall_1()); 
    }
    this_Range_1=ruleRange
    { 
        $current = $this_Range_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetLiteralAccess().getSetConstructParserRuleCall_2()); 
    }
    this_SetConstruct_2=ruleSetConstruct
    { 
        $current = $this_SetConstruct_2.current; 
        afterParserOrEnumRuleCall();
    }

    |this_LID_3=RULE_LID
    { 
    newLeafNode(this_LID_3, grammarAccess.getSetLiteralAccess().getLIDTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current; } 
	 EOF 
;

// Rule Atom
ruleAtom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getPredicateAtomParserRuleCall_0()); 
    }
    this_PredicateAtom_0=rulePredicateAtom
    { 
        $current = $this_PredicateAtom_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getBuiltInAtomParserRuleCall_1()); 
    }
    this_BuiltInAtom_1=ruleBuiltInAtom
    { 
        $current = $this_BuiltInAtom_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePredicateAtom
entryRulePredicateAtom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateAtomRule()); }
	 iv_rulePredicateAtom=rulePredicateAtom 
	 { $current=$iv_rulePredicateAtom.current; } 
	 EOF 
;

// Rule PredicateAtom
rulePredicateAtom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_fid_0_0=RULE_LID
		{
			newLeafNode(lv_fid_0_0, grammarAccess.getPredicateAtomAccess().getFidLIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPredicateAtomRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fid",
        		lv_fid_0_0, 
        		"net.certware.argument.language.L.LID");
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPredicateAtomAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAtomAccess().getTermsTermsParserRuleCall_1_1_0()); 
	    }
		lv_terms_2_0=ruleTerms		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateAtomRule());
	        }
       		set(
       			$current, 
       			"terms",
        		lv_terms_2_0, 
        		"net.certware.argument.language.L.Terms");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPredicateAtomAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleBasicPredicateAtom
entryRuleBasicPredicateAtom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicPredicateAtomRule()); }
	 iv_ruleBasicPredicateAtom=ruleBasicPredicateAtom 
	 { $current=$iv_ruleBasicPredicateAtom.current; } 
	 EOF 
;

// Rule BasicPredicateAtom
ruleBasicPredicateAtom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_fid_0_0=RULE_LID
		{
			newLeafNode(lv_fid_0_0, grammarAccess.getBasicPredicateAtomAccess().getFidLIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicPredicateAtomRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fid",
        		lv_fid_0_0, 
        		"net.certware.argument.language.L.LID");
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBasicPredicateAtomAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicPredicateAtomAccess().getTermsBasicTermsParserRuleCall_1_1_0()); 
	    }
		lv_terms_2_0=ruleBasicTerms		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicPredicateAtomRule());
	        }
       		set(
       			$current, 
       			"terms",
        		lv_terms_2_0, 
        		"net.certware.argument.language.L.BasicTerms");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBasicPredicateAtomAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleBuiltInAtom
entryRuleBuiltInAtom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInAtomRule()); }
	 iv_ruleBuiltInAtom=ruleBuiltInAtom 
	 { $current=$iv_ruleBuiltInAtom.current; } 
	 EOF 
;

// Rule BuiltInAtom
ruleBuiltInAtom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBuiltInAtomAccess().getLhsBasicTermParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleBasicTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBuiltInAtomRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"net.certware.argument.language.L.BasicTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBuiltInAtomAccess().getOpAtomOpParserRuleCall_1_0()); 
	    }
		lv_op_1_0=ruleAtomOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBuiltInAtomRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"net.certware.argument.language.L.AtomOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBuiltInAtomAccess().getRhsBasicTermParserRuleCall_2_0()); 
	    }
		lv_rhs_2_0=ruleBasicTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBuiltInAtomRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_2_0, 
        		"net.certware.argument.language.L.BasicTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBasicAtom
entryRuleBasicAtom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicAtomRule()); }
	 iv_ruleBasicAtom=ruleBasicAtom 
	 { $current=$iv_ruleBasicAtom.current; } 
	 EOF 
;

// Rule BasicAtom
ruleBasicAtom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBasicAtomAccess().getBasicPredicateAtomParserRuleCall_0()); 
    }
    this_BasicPredicateAtom_0=ruleBasicPredicateAtom
    { 
        $current = $this_BasicPredicateAtom_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBasicAtomAccess().getBuiltInAtomParserRuleCall_1()); 
    }
    this_BuiltInAtom_1=ruleBuiltInAtom
    { 
        $current = $this_BuiltInAtom_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomOp
entryRuleAtomOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomOpRule()); } 
	 iv_ruleAtomOp=ruleAtomOp 
	 { $current=$iv_ruleAtomOp.current.getText(); }  
	 EOF 
;

// Rule AtomOp
ruleAtomOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAtomOpAccess().getGreaterThanSignKeyword_0()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAtomOpAccess().getLessThanSignKeyword_1()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAtomOpAccess().getGreaterThanSignEqualsSignKeyword_2()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAtomOpAccess().getLessThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAtomOpAccess().getEqualsSignKeyword_4()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAtomOpAccess().getExclamationMarkEqualsSignKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleSentence
entryRuleSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSentenceRule()); }
	 iv_ruleSentence=ruleSentence 
	 { $current=$iv_ruleSentence.current; } 
	 EOF 
;

// Rule Sentence
ruleSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getOrSentenceParserRuleCall()); 
    }
    this_OrSentence_0=ruleOrSentence
    { 
        $current = $this_OrSentence_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOrSentence
entryRuleOrSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrSentenceRule()); }
	 iv_ruleOrSentence=ruleOrSentence 
	 { $current=$iv_ruleOrSentence.current; } 
	 EOF 
;

// Rule OrSentence
ruleOrSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOrSentenceAccess().getAndSentenceParserRuleCall_0()); 
    }
    this_AndSentence_0=ruleAndSentence
    { 
        $current = $this_AndSentence_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrSentenceAccess().getOrSentenceLeftAction_1_0(),
            $current);
    }
)	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrSentenceAccess().getOrKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrSentenceAccess().getRightAndSentenceParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndSentence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrSentenceRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"net.certware.argument.language.L.AndSentence");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndSentence
entryRuleAndSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndSentenceRule()); }
	 iv_ruleAndSentence=ruleAndSentence 
	 { $current=$iv_ruleAndSentence.current; } 
	 EOF 
;

// Rule AndSentence
ruleAndSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAndSentenceAccess().getPrimarySentenceParserRuleCall_0()); 
    }
    this_PrimarySentence_0=rulePrimarySentence
    { 
        $current = $this_PrimarySentence_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndSentenceAccess().getAndSentenceLeftAction_1_0(),
            $current);
    }
)(	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndSentenceAccess().getAndKeyword_1_1_0());
    }

    |	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAndSentenceAccess().getCommaKeyword_1_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndSentenceAccess().getRightPrimarySentenceParserRuleCall_1_2_0()); 
	    }
		lv_right_4_0=rulePrimarySentence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndSentenceRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"net.certware.argument.language.L.PrimarySentence");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimarySentence
entryRulePrimarySentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimarySentenceRule()); }
	 iv_rulePrimarySentence=rulePrimarySentence 
	 { $current=$iv_rulePrimarySentence.current; } 
	 EOF 
;

// Rule PrimarySentence
rulePrimarySentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimarySentenceAccess().getSentenceLiteralParserRuleCall_0()); 
    }
    this_SentenceLiteral_0=ruleSentenceLiteral
    { 
        $current = $this_SentenceLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrimarySentenceAccess().getLeftParenthesisKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimarySentenceAccess().getOrSentenceParserRuleCall_1_1()); 
    }
    this_OrSentence_2=ruleOrSentence
    { 
        $current = $this_OrSentence_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimarySentenceAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleSentenceLiteral
entryRuleSentenceLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSentenceLiteralRule()); }
	 iv_ruleSentenceLiteral=ruleSentenceLiteral 
	 { $current=$iv_ruleSentenceLiteral.current; } 
	 EOF 
;

// Rule SentenceLiteral
ruleSentenceLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSentenceLiteralAccess().getAtomParserRuleCall_0()); 
    }
    this_Atom_0=ruleAtom
    { 
        $current = $this_Atom_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='not' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSentenceLiteralAccess().getNotKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSentenceLiteralAccess().getBasicAtomParserRuleCall_1_1()); 
    }
    this_BasicAtom_2=ruleBasicAtom
    { 
        $current = $this_BasicAtom_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRulepSentence
entryRulepSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPSentenceRule()); }
	 iv_rulepSentence=rulepSentence 
	 { $current=$iv_rulepSentence.current; } 
	 EOF 
;

// Rule pSentence
rulepSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPSentenceAccess().getPOrSentenceParserRuleCall()); 
    }
    this_pOrSentence_0=rulepOrSentence
    { 
        $current = $this_pOrSentence_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulepOrSentence
entryRulepOrSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPOrSentenceRule()); }
	 iv_rulepOrSentence=rulepOrSentence 
	 { $current=$iv_rulepOrSentence.current; } 
	 EOF 
;

// Rule pOrSentence
rulepOrSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPOrSentenceAccess().getPAndSentenceParserRuleCall_0()); 
    }
    this_pAndSentence_0=rulepAndSentence
    { 
        $current = $this_pAndSentence_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPOrSentenceAccess().getPOrSentenceLeftAction_1_0(),
            $current);
    }
)	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPOrSentenceAccess().getOrKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPOrSentenceAccess().getRightPAndSentenceParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulepAndSentence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPOrSentenceRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"net.certware.argument.language.L.pAndSentence");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulepAndSentence
entryRulepAndSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPAndSentenceRule()); }
	 iv_rulepAndSentence=rulepAndSentence 
	 { $current=$iv_rulepAndSentence.current; } 
	 EOF 
;

// Rule pAndSentence
rulepAndSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPAndSentenceAccess().getPPrimarySentenceParserRuleCall_0()); 
    }
    this_pPrimarySentence_0=rulepPrimarySentence
    { 
        $current = $this_pPrimarySentence_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPAndSentenceAccess().getPAndSentenceLeftAction_1_0(),
            $current);
    }
)	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPAndSentenceAccess().getAndKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPAndSentenceAccess().getRightPPrimarySentenceParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulepPrimarySentence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPAndSentenceRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"net.certware.argument.language.L.pPrimarySentence");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulepPrimarySentence
entryRulepPrimarySentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPPrimarySentenceRule()); }
	 iv_rulepPrimarySentence=rulepPrimarySentence 
	 { $current=$iv_rulepPrimarySentence.current; } 
	 EOF 
;

// Rule pPrimarySentence
rulepPrimarySentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPPrimarySentenceAccess().getPSentenceLiteralParserRuleCall_0()); 
    }
    this_pSentenceLiteral_0=rulepSentenceLiteral
    { 
        $current = $this_pSentenceLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPPrimarySentenceAccess().getLeftParenthesisKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPPrimarySentenceAccess().getPOrSentenceParserRuleCall_1_1()); 
    }
    this_pOrSentence_2=rulepOrSentence
    { 
        $current = $this_pOrSentence_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPPrimarySentenceAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRulepSentenceLiteral
entryRulepSentenceLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPSentenceLiteralRule()); }
	 iv_rulepSentenceLiteral=rulepSentenceLiteral 
	 { $current=$iv_rulepSentenceLiteral.current; } 
	 EOF 
;

// Rule pSentenceLiteral
rulepSentenceLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPSentenceLiteralAccess().getPredicateAtomParserRuleCall_0()); 
    }
    this_PredicateAtom_0=rulePredicateAtom
    { 
        $current = $this_PredicateAtom_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='not' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPSentenceLiteralAccess().getNotKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPSentenceLiteralAccess().getBasicPredicateAtomParserRuleCall_1_1()); 
    }
    this_BasicPredicateAtom_2=ruleBasicPredicateAtom
    { 
        $current = $this_BasicPredicateAtom_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleMaybeLiteral
entryRuleMaybeLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMaybeLiteralRule()); }
	 iv_ruleMaybeLiteral=ruleMaybeLiteral 
	 { $current=$iv_ruleMaybeLiteral.current; } 
	 EOF 
;

// Rule MaybeLiteral
ruleMaybeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='maybe' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMaybeLiteralAccess().getMaybeKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMaybeLiteralAccess().getBasicPredicateAtomParserRuleCall_1()); 
    }
    this_BasicPredicateAtom_1=ruleBasicPredicateAtom
    { 
        $current = $this_BasicPredicateAtom_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCardinalityConstraint
entryRuleCardinalityConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCardinalityConstraintRule()); }
	 iv_ruleCardinalityConstraint=ruleCardinalityConstraint 
	 { $current=$iv_ruleCardinalityConstraint.current; } 
	 EOF 
;

// Rule CardinalityConstraint
ruleCardinalityConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCardinalityConstraintAccess().getLhsBoundParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCardinalityConstraintRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"net.certware.argument.language.L.Bound");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='<=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCardinalityConstraintAccess().getLessThanSignEqualsSignKeyword_1());
    }
	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCardinalityConstraintAccess().getVerticalLineKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCardinalityConstraintAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCardinalityConstraintAccess().getAtomBasicPredicateAtomParserRuleCall_4_0()); 
	    }
		lv_atom_4_0=ruleBasicPredicateAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCardinalityConstraintRule());
	        }
       		set(
       			$current, 
       			"atom",
        		lv_atom_4_0, 
        		"net.certware.argument.language.L.BasicPredicateAtom");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCardinalityConstraintAccess().getRightCurlyBracketKeyword_5());
    }
	otherlv_6='|' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCardinalityConstraintAccess().getVerticalLineKeyword_6());
    }
	otherlv_7='<=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCardinalityConstraintAccess().getLessThanSignEqualsSignKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCardinalityConstraintAccess().getRhsBoundParserRuleCall_8_0()); 
	    }
		lv_rhs_8_0=ruleBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCardinalityConstraintRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_8_0, 
        		"net.certware.argument.language.L.Bound");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBound
entryRuleBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoundRule()); }
	 iv_ruleBound=ruleBound 
	 { $current=$iv_ruleBound.current; } 
	 EOF 
;

// Rule Bound
ruleBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBoundAccess().getAvArithmeticTermParserRuleCall_0()); 
	    }
		lv_av_0_0=ruleArithmeticTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoundRule());
	        }
       		set(
       			$current, 
       			"av",
        		lv_av_0_0, 
        		"net.certware.argument.language.L.ArithmeticTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getHeadHeadParserRuleCall_0_0()); 
	    }
		lv_head_0_0=ruleHead		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"head",
        		lv_head_0_0, 
        		"net.certware.argument.language.L.Head");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_condition_1_0=	'if' 
    {
        newLeafNode(lv_condition_1_0, grammarAccess.getRuleAccess().getConditionIfKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleRule());
	        }
       		setWithLastConsumed($current, "condition", lv_condition_1_0, "if");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getBodySentenceParserRuleCall_1_1_0()); 
	    }
		lv_body_2_0=ruleSentence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"net.certware.argument.language.L.Sentence");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getFullStopKeyword_2());
    }
)
;





// Entry rule entryRuleHead
entryRuleHead returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHeadRule()); }
	 iv_ruleHead=ruleHead 
	 { $current=$iv_ruleHead.current; } 
	 EOF 
;

// Rule Head
ruleHead returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getHeadAccess().getPSentenceParserRuleCall_0()); 
    }
    this_pSentence_0=rulepSentence
    { 
        $current = $this_pSentence_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getHeadAccess().getMaybeLiteralParserRuleCall_1()); 
    }
    this_MaybeLiteral_1=ruleMaybeLiteral
    { 
        $current = $this_MaybeLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getHeadAccess().getCardinalityConstraintParserRuleCall_2()); 
    }
    this_CardinalityConstraint_2=ruleCardinalityConstraint
    { 
        $current = $this_CardinalityConstraint_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getRuleParserRuleCall_0()); 
    }
    this_Rule_0=ruleRule
    { 
        $current = $this_Rule_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getTypeDeclarationParserRuleCall_1()); 
    }
    this_TypeDeclaration_1=ruleTypeDeclaration
    { 
        $current = $this_TypeDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getConstantDeclarationParserRuleCall_2()); 
    }
    this_ConstantDeclaration_2=ruleConstantDeclaration
    { 
        $current = $this_ConstantDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





RULE_LID : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_UID : 'A'..'Z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_NUMERIC_CONSTANT : ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


