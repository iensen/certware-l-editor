/*
 * generated by Xtext
 */
package net.certware.argument.language.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import net.certware.argument.language.services.LGrammarAccess;

public class LParser extends AbstractContentAssistParser {
	
	@Inject
	private LGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected net.certware.argument.language.ui.contentassist.antlr.internal.InternalLParser createParser() {
		net.certware.argument.language.ui.contentassist.antlr.internal.InternalLParser result = new net.certware.argument.language.ui.contentassist.antlr.internal.InternalLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBasicTermAccess().getAlternatives(), "rule__BasicTerm__Alternatives");
					put(grammarAccess.getAdditionAccess().getAlternatives_1_1(), "rule__Addition__Alternatives_1_1");
					put(grammarAccess.getMultiplicationAccess().getAlternatives_1_1(), "rule__Multiplication__Alternatives_1_1");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getArithmeticLiteralAccess().getAlternatives(), "rule__ArithmeticLiteral__Alternatives");
					put(grammarAccess.getGroundAdditionAccess().getAlternatives_1_1(), "rule__GroundAddition__Alternatives_1_1");
					put(grammarAccess.getGroundMultiplicationAccess().getAlternatives_1_1(), "rule__GroundMultiplication__Alternatives_1_1");
					put(grammarAccess.getGroundPrimaryAccess().getAlternatives(), "rule__GroundPrimary__Alternatives");
					put(grammarAccess.getGroundArithmeticLiteralAccess().getAlternatives(), "rule__GroundArithmeticLiteral__Alternatives");
					put(grammarAccess.getGroundTermAccess().getAlternatives(), "rule__GroundTerm__Alternatives");
					put(grammarAccess.getQuantifiedTermAccess().getAlternatives(), "rule__QuantifiedTerm__Alternatives");
					put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
					put(grammarAccess.getSetMultiplicationAccess().getAlternatives_1_1(), "rule__SetMultiplication__Alternatives_1_1");
					put(grammarAccess.getSetPrimaryAccess().getAlternatives(), "rule__SetPrimary__Alternatives");
					put(grammarAccess.getSetLiteralAccess().getAlternatives(), "rule__SetLiteral__Alternatives");
					put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
					put(grammarAccess.getBasicAtomAccess().getAlternatives(), "rule__BasicAtom__Alternatives");
					put(grammarAccess.getAtomOpAccess().getAlternatives(), "rule__AtomOp__Alternatives");
					put(grammarAccess.getAndSentenceAccess().getAlternatives_1_1(), "rule__AndSentence__Alternatives_1_1");
					put(grammarAccess.getPrimarySentenceAccess().getAlternatives(), "rule__PrimarySentence__Alternatives");
					put(grammarAccess.getSentenceLiteralAccess().getAlternatives(), "rule__SentenceLiteral__Alternatives");
					put(grammarAccess.getPPrimarySentenceAccess().getAlternatives(), "rule__PPrimarySentence__Alternatives");
					put(grammarAccess.getPSentenceLiteralAccess().getAlternatives(), "rule__PSentenceLiteral__Alternatives");
					put(grammarAccess.getHeadAccess().getAlternatives(), "rule__Head__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getTypedVariableAccess().getGroup(), "rule__TypedVariable__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getGroundAdditionAccess().getGroup(), "rule__GroundAddition__Group__0");
					put(grammarAccess.getGroundAdditionAccess().getGroup_1(), "rule__GroundAddition__Group_1__0");
					put(grammarAccess.getGroundMultiplicationAccess().getGroup(), "rule__GroundMultiplication__Group__0");
					put(grammarAccess.getGroundMultiplicationAccess().getGroup_1(), "rule__GroundMultiplication__Group_1__0");
					put(grammarAccess.getGroundPrimaryAccess().getGroup_1(), "rule__GroundPrimary__Group_1__0");
					put(grammarAccess.getFunctionalTermAccess().getGroup(), "rule__FunctionalTerm__Group__0");
					put(grammarAccess.getGroundFunctionalTermAccess().getGroup(), "rule__GroundFunctionalTerm__Group__0");
					put(grammarAccess.getBasicTermsAccess().getGroup(), "rule__BasicTerms__Group__0");
					put(grammarAccess.getBasicTermsAccess().getGroup_1(), "rule__BasicTerms__Group_1__0");
					put(grammarAccess.getGroundTermsAccess().getGroup(), "rule__GroundTerms__Group__0");
					put(grammarAccess.getGroundTermsAccess().getGroup_1(), "rule__GroundTerms__Group_1__0");
					put(grammarAccess.getUniversalQuantifiedTermAccess().getGroup(), "rule__UniversalQuantifiedTerm__Group__0");
					put(grammarAccess.getExistentialQuantifiedTermAccess().getGroup(), "rule__ExistentialQuantifiedTerm__Group__0");
					put(grammarAccess.getTermsAccess().getGroup(), "rule__Terms__Group__0");
					put(grammarAccess.getTermsAccess().getGroup_1(), "rule__Terms__Group_1__0");
					put(grammarAccess.getConstantDeclarationAccess().getGroup(), "rule__ConstantDeclaration__Group__0");
					put(grammarAccess.getTypeDeclarationAccess().getGroup(), "rule__TypeDeclaration__Group__0");
					put(grammarAccess.getSetAccess().getGroup(), "rule__Set__Group__0");
					put(grammarAccess.getRangeAccess().getGroup(), "rule__Range__Group__0");
					put(grammarAccess.getSetConstructAccess().getGroup(), "rule__SetConstruct__Group__0");
					put(grammarAccess.getTVarsAccess().getGroup(), "rule__TVars__Group__0");
					put(grammarAccess.getTVarsAccess().getGroup_1(), "rule__TVars__Group_1__0");
					put(grammarAccess.getTVarAccess().getGroup(), "rule__TVar__Group__0");
					put(grammarAccess.getSetAdditionAccess().getGroup(), "rule__SetAddition__Group__0");
					put(grammarAccess.getSetAdditionAccess().getGroup_1(), "rule__SetAddition__Group_1__0");
					put(grammarAccess.getSetMultiplicationAccess().getGroup(), "rule__SetMultiplication__Group__0");
					put(grammarAccess.getSetMultiplicationAccess().getGroup_1(), "rule__SetMultiplication__Group_1__0");
					put(grammarAccess.getSetPrimaryAccess().getGroup_1(), "rule__SetPrimary__Group_1__0");
					put(grammarAccess.getPredicateAtomAccess().getGroup(), "rule__PredicateAtom__Group__0");
					put(grammarAccess.getPredicateAtomAccess().getGroup_1(), "rule__PredicateAtom__Group_1__0");
					put(grammarAccess.getBasicPredicateAtomAccess().getGroup(), "rule__BasicPredicateAtom__Group__0");
					put(grammarAccess.getBasicPredicateAtomAccess().getGroup_1(), "rule__BasicPredicateAtom__Group_1__0");
					put(grammarAccess.getBuiltInAtomAccess().getGroup(), "rule__BuiltInAtom__Group__0");
					put(grammarAccess.getOrSentenceAccess().getGroup(), "rule__OrSentence__Group__0");
					put(grammarAccess.getOrSentenceAccess().getGroup_1(), "rule__OrSentence__Group_1__0");
					put(grammarAccess.getAndSentenceAccess().getGroup(), "rule__AndSentence__Group__0");
					put(grammarAccess.getAndSentenceAccess().getGroup_1(), "rule__AndSentence__Group_1__0");
					put(grammarAccess.getPrimarySentenceAccess().getGroup_1(), "rule__PrimarySentence__Group_1__0");
					put(grammarAccess.getSentenceLiteralAccess().getGroup_1(), "rule__SentenceLiteral__Group_1__0");
					put(grammarAccess.getPOrSentenceAccess().getGroup(), "rule__POrSentence__Group__0");
					put(grammarAccess.getPOrSentenceAccess().getGroup_1(), "rule__POrSentence__Group_1__0");
					put(grammarAccess.getPAndSentenceAccess().getGroup(), "rule__PAndSentence__Group__0");
					put(grammarAccess.getPAndSentenceAccess().getGroup_1(), "rule__PAndSentence__Group_1__0");
					put(grammarAccess.getPPrimarySentenceAccess().getGroup_1(), "rule__PPrimarySentence__Group_1__0");
					put(grammarAccess.getPSentenceLiteralAccess().getGroup_1(), "rule__PSentenceLiteral__Group_1__0");
					put(grammarAccess.getMaybeLiteralAccess().getGroup(), "rule__MaybeLiteral__Group__0");
					put(grammarAccess.getCardinalityConstraintAccess().getGroup(), "rule__CardinalityConstraint__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getRuleAccess().getGroup_1(), "rule__Rule__Group_1__0");
					put(grammarAccess.getProgramAccess().getStatementsAssignment(), "rule__Program__StatementsAssignment");
					put(grammarAccess.getVariableAccess().getIdentifierAssignment(), "rule__Variable__IdentifierAssignment");
					put(grammarAccess.getTypedVariableAccess().getNameAssignment_0(), "rule__TypedVariable__NameAssignment_0");
					put(grammarAccess.getTypedVariableAccess().getVarAssignment_1(), "rule__TypedVariable__VarAssignment_1");
					put(grammarAccess.getAdditionAccess().getRhsAssignment_1_2(), "rule__Addition__RhsAssignment_1_2");
					put(grammarAccess.getMultiplicationAccess().getRhsAssignment_1_2(), "rule__Multiplication__RhsAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getTermAssignment_0(), "rule__Primary__TermAssignment_0");
					put(grammarAccess.getPrimaryAccess().getTermAssignment_1_1(), "rule__Primary__TermAssignment_1_1");
					put(grammarAccess.getArithmeticLiteralAccess().getVAssignment_0(), "rule__ArithmeticLiteral__VAssignment_0");
					put(grammarAccess.getArithmeticLiteralAccess().getTvAssignment_1(), "rule__ArithmeticLiteral__TvAssignment_1");
					put(grammarAccess.getArithmeticLiteralAccess().getConstAssignment_2(), "rule__ArithmeticLiteral__ConstAssignment_2");
					put(grammarAccess.getArithmeticLiteralAccess().getValueAssignment_3(), "rule__ArithmeticLiteral__ValueAssignment_3");
					put(grammarAccess.getGroundAdditionAccess().getRhsAssignment_1_2(), "rule__GroundAddition__RhsAssignment_1_2");
					put(grammarAccess.getGroundMultiplicationAccess().getRhsAssignment_1_2(), "rule__GroundMultiplication__RhsAssignment_1_2");
					put(grammarAccess.getGroundPrimaryAccess().getTermAssignment_0(), "rule__GroundPrimary__TermAssignment_0");
					put(grammarAccess.getGroundPrimaryAccess().getTermAssignment_1_1(), "rule__GroundPrimary__TermAssignment_1_1");
					put(grammarAccess.getGroundArithmeticLiteralAccess().getIdentifierAssignment_0(), "rule__GroundArithmeticLiteral__IdentifierAssignment_0");
					put(grammarAccess.getGroundArithmeticLiteralAccess().getValueAssignment_1(), "rule__GroundArithmeticLiteral__ValueAssignment_1");
					put(grammarAccess.getBasicTermsAccess().getCarAssignment_0(), "rule__BasicTerms__CarAssignment_0");
					put(grammarAccess.getBasicTermsAccess().getCdrAssignment_1_1(), "rule__BasicTerms__CdrAssignment_1_1");
					put(grammarAccess.getGroundTermsAccess().getCarAssignment_0(), "rule__GroundTerms__CarAssignment_0");
					put(grammarAccess.getGroundTermsAccess().getCdrAssignment_1_1(), "rule__GroundTerms__CdrAssignment_1_1");
					put(grammarAccess.getUniversalQuantifiedTermAccess().getNameAssignment_1(), "rule__UniversalQuantifiedTerm__NameAssignment_1");
					put(grammarAccess.getExistentialQuantifiedTermAccess().getNameAssignment_1(), "rule__ExistentialQuantifiedTerm__NameAssignment_1");
					put(grammarAccess.getTermsAccess().getCarAssignment_0(), "rule__Terms__CarAssignment_0");
					put(grammarAccess.getTermsAccess().getCdrAssignment_1_1(), "rule__Terms__CdrAssignment_1_1");
					put(grammarAccess.getConstantDeclarationAccess().getNameAssignment_1(), "rule__ConstantDeclaration__NameAssignment_1");
					put(grammarAccess.getConstantDeclarationAccess().getCvAssignment_3(), "rule__ConstantDeclaration__CvAssignment_3");
					put(grammarAccess.getTypeIdAccess().getNameAssignment(), "rule__TypeId__NameAssignment");
					put(grammarAccess.getTypeDeclarationAccess().getNameAssignment_1(), "rule__TypeDeclaration__NameAssignment_1");
					put(grammarAccess.getTypeDeclarationAccess().getExpAssignment_3(), "rule__TypeDeclaration__ExpAssignment_3");
					put(grammarAccess.getLimitAccess().getCvAssignment(), "rule__Limit__CvAssignment");
					put(grammarAccess.getSetAccess().getLhsAssignment_0(), "rule__Set__LhsAssignment_0");
					put(grammarAccess.getSetAccess().getTermsAssignment_1(), "rule__Set__TermsAssignment_1");
					put(grammarAccess.getRangeAccess().getLhsAssignment_1(), "rule__Range__LhsAssignment_1");
					put(grammarAccess.getRangeAccess().getRhsAssignment_4(), "rule__Range__RhsAssignment_4");
					put(grammarAccess.getSetConstructAccess().getLhsAssignment_0(), "rule__SetConstruct__LhsAssignment_0");
					put(grammarAccess.getSetConstructAccess().getRhsAssignment_2(), "rule__SetConstruct__RhsAssignment_2");
					put(grammarAccess.getTVarsAccess().getCarAssignment_0(), "rule__TVars__CarAssignment_0");
					put(grammarAccess.getTVarsAccess().getCdrAssignment_1_1(), "rule__TVars__CdrAssignment_1_1");
					put(grammarAccess.getTVarAccess().getVarAssignment_0(), "rule__TVar__VarAssignment_0");
					put(grammarAccess.getTVarAccess().getIdAssignment_2(), "rule__TVar__IdAssignment_2");
					put(grammarAccess.getSetAdditionAccess().getRightAssignment_1_2(), "rule__SetAddition__RightAssignment_1_2");
					put(grammarAccess.getSetMultiplicationAccess().getRightAssignment_1_2(), "rule__SetMultiplication__RightAssignment_1_2");
					put(grammarAccess.getPredicateAtomAccess().getFidAssignment_0(), "rule__PredicateAtom__FidAssignment_0");
					put(grammarAccess.getPredicateAtomAccess().getTermsAssignment_1_1(), "rule__PredicateAtom__TermsAssignment_1_1");
					put(grammarAccess.getBasicPredicateAtomAccess().getFidAssignment_0(), "rule__BasicPredicateAtom__FidAssignment_0");
					put(grammarAccess.getBasicPredicateAtomAccess().getTermsAssignment_1_1(), "rule__BasicPredicateAtom__TermsAssignment_1_1");
					put(grammarAccess.getBuiltInAtomAccess().getLhsAssignment_0(), "rule__BuiltInAtom__LhsAssignment_0");
					put(grammarAccess.getBuiltInAtomAccess().getOpAssignment_1(), "rule__BuiltInAtom__OpAssignment_1");
					put(grammarAccess.getBuiltInAtomAccess().getRhsAssignment_2(), "rule__BuiltInAtom__RhsAssignment_2");
					put(grammarAccess.getOrSentenceAccess().getRightAssignment_1_2(), "rule__OrSentence__RightAssignment_1_2");
					put(grammarAccess.getAndSentenceAccess().getRightAssignment_1_2(), "rule__AndSentence__RightAssignment_1_2");
					put(grammarAccess.getPOrSentenceAccess().getRightAssignment_1_2(), "rule__POrSentence__RightAssignment_1_2");
					put(grammarAccess.getPAndSentenceAccess().getRightAssignment_1_2(), "rule__PAndSentence__RightAssignment_1_2");
					put(grammarAccess.getCardinalityConstraintAccess().getLhsAssignment_0(), "rule__CardinalityConstraint__LhsAssignment_0");
					put(grammarAccess.getCardinalityConstraintAccess().getAtomAssignment_4(), "rule__CardinalityConstraint__AtomAssignment_4");
					put(grammarAccess.getCardinalityConstraintAccess().getRhsAssignment_8(), "rule__CardinalityConstraint__RhsAssignment_8");
					put(grammarAccess.getBoundAccess().getAvAssignment(), "rule__Bound__AvAssignment");
					put(grammarAccess.getRuleAccess().getHeadAssignment_0(), "rule__Rule__HeadAssignment_0");
					put(grammarAccess.getRuleAccess().getConditionAssignment_1_0(), "rule__Rule__ConditionAssignment_1_0");
					put(grammarAccess.getRuleAccess().getBodyAssignment_1_1(), "rule__Rule__BodyAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			net.certware.argument.language.ui.contentassist.antlr.internal.InternalLParser typedParser = (net.certware.argument.language.ui.contentassist.antlr.internal.InternalLParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
