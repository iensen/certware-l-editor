/*
 * generated by Xtext
 */
grammar InternalL;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package net.certware.argument.language.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package net.certware.argument.language.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import net.certware.argument.language.services.LGrammarAccess;

}

@parser::members {
 
 	private LGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getStatementsAssignment()); }
(rule__Program__StatementsAssignment)*
{ after(grammarAccess.getProgramAccess().getStatementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicTerm
entryRuleBasicTerm 
:
{ before(grammarAccess.getBasicTermRule()); }
	 ruleBasicTerm
{ after(grammarAccess.getBasicTermRule()); } 
	 EOF 
;

// Rule BasicTerm
ruleBasicTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicTermAccess().getAlternatives()); }
(rule__BasicTerm__Alternatives)
{ after(grammarAccess.getBasicTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getIdentifierAssignment()); }
(rule__Variable__IdentifierAssignment)
{ after(grammarAccess.getVariableAccess().getIdentifierAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypedVariable
entryRuleTypedVariable 
:
{ before(grammarAccess.getTypedVariableRule()); }
	 ruleTypedVariable
{ after(grammarAccess.getTypedVariableRule()); } 
	 EOF 
;

// Rule TypedVariable
ruleTypedVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypedVariableAccess().getGroup()); }
(rule__TypedVariable__Group__0)
{ after(grammarAccess.getTypedVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArithmeticTerm
entryRuleArithmeticTerm 
:
{ before(grammarAccess.getArithmeticTermRule()); }
	 ruleArithmeticTerm
{ after(grammarAccess.getArithmeticTermRule()); } 
	 EOF 
;

// Rule ArithmeticTerm
ruleArithmeticTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArithmeticTermAccess().getAdditionParserRuleCall()); }
	ruleAddition
{ after(grammarAccess.getArithmeticTermAccess().getAdditionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddition
entryRuleAddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimary
entryRulePrimary 
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArithmeticLiteral
entryRuleArithmeticLiteral 
:
{ before(grammarAccess.getArithmeticLiteralRule()); }
	 ruleArithmeticLiteral
{ after(grammarAccess.getArithmeticLiteralRule()); } 
	 EOF 
;

// Rule ArithmeticLiteral
ruleArithmeticLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArithmeticLiteralAccess().getAlternatives()); }
(rule__ArithmeticLiteral__Alternatives)
{ after(grammarAccess.getArithmeticLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroundArithmeticTerm
entryRuleGroundArithmeticTerm 
:
{ before(grammarAccess.getGroundArithmeticTermRule()); }
	 ruleGroundArithmeticTerm
{ after(grammarAccess.getGroundArithmeticTermRule()); } 
	 EOF 
;

// Rule GroundArithmeticTerm
ruleGroundArithmeticTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGroundArithmeticTermAccess().getGroundAdditionParserRuleCall()); }
	ruleGroundAddition
{ after(grammarAccess.getGroundArithmeticTermAccess().getGroundAdditionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroundAddition
entryRuleGroundAddition 
:
{ before(grammarAccess.getGroundAdditionRule()); }
	 ruleGroundAddition
{ after(grammarAccess.getGroundAdditionRule()); } 
	 EOF 
;

// Rule GroundAddition
ruleGroundAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGroundAdditionAccess().getGroup()); }
(rule__GroundAddition__Group__0)
{ after(grammarAccess.getGroundAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroundMultiplication
entryRuleGroundMultiplication 
:
{ before(grammarAccess.getGroundMultiplicationRule()); }
	 ruleGroundMultiplication
{ after(grammarAccess.getGroundMultiplicationRule()); } 
	 EOF 
;

// Rule GroundMultiplication
ruleGroundMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGroundMultiplicationAccess().getGroup()); }
(rule__GroundMultiplication__Group__0)
{ after(grammarAccess.getGroundMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroundPrimary
entryRuleGroundPrimary 
:
{ before(grammarAccess.getGroundPrimaryRule()); }
	 ruleGroundPrimary
{ after(grammarAccess.getGroundPrimaryRule()); } 
	 EOF 
;

// Rule GroundPrimary
ruleGroundPrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGroundPrimaryAccess().getAlternatives()); }
(rule__GroundPrimary__Alternatives)
{ after(grammarAccess.getGroundPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroundArithmeticLiteral
entryRuleGroundArithmeticLiteral 
:
{ before(grammarAccess.getGroundArithmeticLiteralRule()); }
	 ruleGroundArithmeticLiteral
{ after(grammarAccess.getGroundArithmeticLiteralRule()); } 
	 EOF 
;

// Rule GroundArithmeticLiteral
ruleGroundArithmeticLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGroundArithmeticLiteralAccess().getAlternatives()); }
(rule__GroundArithmeticLiteral__Alternatives)
{ after(grammarAccess.getGroundArithmeticLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionalTerm
entryRuleFunctionalTerm 
:
{ before(grammarAccess.getFunctionalTermRule()); }
	 ruleFunctionalTerm
{ after(grammarAccess.getFunctionalTermRule()); } 
	 EOF 
;

// Rule FunctionalTerm
ruleFunctionalTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionalTermAccess().getGroup()); }
(rule__FunctionalTerm__Group__0)
{ after(grammarAccess.getFunctionalTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroundFunctionalTerm
entryRuleGroundFunctionalTerm 
:
{ before(grammarAccess.getGroundFunctionalTermRule()); }
	 ruleGroundFunctionalTerm
{ after(grammarAccess.getGroundFunctionalTermRule()); } 
	 EOF 
;

// Rule GroundFunctionalTerm
ruleGroundFunctionalTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGroundFunctionalTermAccess().getGroup()); }
(rule__GroundFunctionalTerm__Group__0)
{ after(grammarAccess.getGroundFunctionalTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicTerms
entryRuleBasicTerms 
:
{ before(grammarAccess.getBasicTermsRule()); }
	 ruleBasicTerms
{ after(grammarAccess.getBasicTermsRule()); } 
	 EOF 
;

// Rule BasicTerms
ruleBasicTerms
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicTermsAccess().getGroup()); }
(rule__BasicTerms__Group__0)
{ after(grammarAccess.getBasicTermsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroundTerms
entryRuleGroundTerms 
:
{ before(grammarAccess.getGroundTermsRule()); }
	 ruleGroundTerms
{ after(grammarAccess.getGroundTermsRule()); } 
	 EOF 
;

// Rule GroundTerms
ruleGroundTerms
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGroundTermsAccess().getGroup()); }
(rule__GroundTerms__Group__0)
{ after(grammarAccess.getGroundTermsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroundTerm
entryRuleGroundTerm 
:
{ before(grammarAccess.getGroundTermRule()); }
	 ruleGroundTerm
{ after(grammarAccess.getGroundTermRule()); } 
	 EOF 
;

// Rule GroundTerm
ruleGroundTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGroundTermAccess().getAlternatives()); }
(rule__GroundTerm__Alternatives)
{ after(grammarAccess.getGroundTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuantifiedTerm
entryRuleQuantifiedTerm 
:
{ before(grammarAccess.getQuantifiedTermRule()); }
	 ruleQuantifiedTerm
{ after(grammarAccess.getQuantifiedTermRule()); } 
	 EOF 
;

// Rule QuantifiedTerm
ruleQuantifiedTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuantifiedTermAccess().getAlternatives()); }
(rule__QuantifiedTerm__Alternatives)
{ after(grammarAccess.getQuantifiedTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUniversalQuantifiedTerm
entryRuleUniversalQuantifiedTerm 
:
{ before(grammarAccess.getUniversalQuantifiedTermRule()); }
	 ruleUniversalQuantifiedTerm
{ after(grammarAccess.getUniversalQuantifiedTermRule()); } 
	 EOF 
;

// Rule UniversalQuantifiedTerm
ruleUniversalQuantifiedTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUniversalQuantifiedTermAccess().getGroup()); }
(rule__UniversalQuantifiedTerm__Group__0)
{ after(grammarAccess.getUniversalQuantifiedTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExistentialQuantifiedTerm
entryRuleExistentialQuantifiedTerm 
:
{ before(grammarAccess.getExistentialQuantifiedTermRule()); }
	 ruleExistentialQuantifiedTerm
{ after(grammarAccess.getExistentialQuantifiedTermRule()); } 
	 EOF 
;

// Rule ExistentialQuantifiedTerm
ruleExistentialQuantifiedTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExistentialQuantifiedTermAccess().getGroup()); }
(rule__ExistentialQuantifiedTerm__Group__0)
{ after(grammarAccess.getExistentialQuantifiedTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getAlternatives()); }
(rule__Term__Alternatives)
{ after(grammarAccess.getTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerms
entryRuleTerms 
:
{ before(grammarAccess.getTermsRule()); }
	 ruleTerms
{ after(grammarAccess.getTermsRule()); } 
	 EOF 
;

// Rule Terms
ruleTerms
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermsAccess().getGroup()); }
(rule__Terms__Group__0)
{ after(grammarAccess.getTermsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantDeclaration
entryRuleConstantDeclaration 
:
{ before(grammarAccess.getConstantDeclarationRule()); }
	 ruleConstantDeclaration
{ after(grammarAccess.getConstantDeclarationRule()); } 
	 EOF 
;

// Rule ConstantDeclaration
ruleConstantDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantDeclarationAccess().getGroup()); }
(rule__ConstantDeclaration__Group__0)
{ after(grammarAccess.getConstantDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeId
entryRuleTypeId 
:
{ before(grammarAccess.getTypeIdRule()); }
	 ruleTypeId
{ after(grammarAccess.getTypeIdRule()); } 
	 EOF 
;

// Rule TypeId
ruleTypeId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeIdAccess().getNameAssignment()); }
(rule__TypeId__NameAssignment)
{ after(grammarAccess.getTypeIdAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration 
:
{ before(grammarAccess.getTypeDeclarationRule()); }
	 ruleTypeDeclaration
{ after(grammarAccess.getTypeDeclarationRule()); } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeDeclarationAccess().getGroup()); }
(rule__TypeDeclaration__Group__0)
{ after(grammarAccess.getTypeDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLimit
entryRuleLimit 
:
{ before(grammarAccess.getLimitRule()); }
	 ruleLimit
{ after(grammarAccess.getLimitRule()); } 
	 EOF 
;

// Rule Limit
ruleLimit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLimitAccess().getCvAssignment()); }
(rule__Limit__CvAssignment)
{ after(grammarAccess.getLimitAccess().getCvAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSet
entryRuleSet 
:
{ before(grammarAccess.getSetRule()); }
	 ruleSet
{ after(grammarAccess.getSetRule()); } 
	 EOF 
;

// Rule Set
ruleSet
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetAccess().getGroup()); }
(rule__Set__Group__0)
{ after(grammarAccess.getSetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRange
entryRuleRange 
:
{ before(grammarAccess.getRangeRule()); }
	 ruleRange
{ after(grammarAccess.getRangeRule()); } 
	 EOF 
;

// Rule Range
ruleRange
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeAccess().getGroup()); }
(rule__Range__Group__0)
{ after(grammarAccess.getRangeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetExpression
entryRuleSetExpression 
:
{ before(grammarAccess.getSetExpressionRule()); }
	 ruleSetExpression
{ after(grammarAccess.getSetExpressionRule()); } 
	 EOF 
;

// Rule SetExpression
ruleSetExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetExpressionAccess().getSetAdditionParserRuleCall()); }
	ruleSetAddition
{ after(grammarAccess.getSetExpressionAccess().getSetAdditionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetConstruct
entryRuleSetConstruct 
:
{ before(grammarAccess.getSetConstructRule()); }
	 ruleSetConstruct
{ after(grammarAccess.getSetConstructRule()); } 
	 EOF 
;

// Rule SetConstruct
ruleSetConstruct
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetConstructAccess().getGroup()); }
(rule__SetConstruct__Group__0)
{ after(grammarAccess.getSetConstructAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTVars
entryRuleTVars 
:
{ before(grammarAccess.getTVarsRule()); }
	 ruleTVars
{ after(grammarAccess.getTVarsRule()); } 
	 EOF 
;

// Rule TVars
ruleTVars
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTVarsAccess().getGroup()); }
(rule__TVars__Group__0)
{ after(grammarAccess.getTVarsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTVar
entryRuleTVar 
:
{ before(grammarAccess.getTVarRule()); }
	 ruleTVar
{ after(grammarAccess.getTVarRule()); } 
	 EOF 
;

// Rule TVar
ruleTVar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTVarAccess().getGroup()); }
(rule__TVar__Group__0)
{ after(grammarAccess.getTVarAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetAddition
entryRuleSetAddition 
:
{ before(grammarAccess.getSetAdditionRule()); }
	 ruleSetAddition
{ after(grammarAccess.getSetAdditionRule()); } 
	 EOF 
;

// Rule SetAddition
ruleSetAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetAdditionAccess().getGroup()); }
(rule__SetAddition__Group__0)
{ after(grammarAccess.getSetAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetMultiplication
entryRuleSetMultiplication 
:
{ before(grammarAccess.getSetMultiplicationRule()); }
	 ruleSetMultiplication
{ after(grammarAccess.getSetMultiplicationRule()); } 
	 EOF 
;

// Rule SetMultiplication
ruleSetMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetMultiplicationAccess().getGroup()); }
(rule__SetMultiplication__Group__0)
{ after(grammarAccess.getSetMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetPrimary
entryRuleSetPrimary 
:
{ before(grammarAccess.getSetPrimaryRule()); }
	 ruleSetPrimary
{ after(grammarAccess.getSetPrimaryRule()); } 
	 EOF 
;

// Rule SetPrimary
ruleSetPrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetPrimaryAccess().getAlternatives()); }
(rule__SetPrimary__Alternatives)
{ after(grammarAccess.getSetPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetLiteral
entryRuleSetLiteral 
:
{ before(grammarAccess.getSetLiteralRule()); }
	 ruleSetLiteral
{ after(grammarAccess.getSetLiteralRule()); } 
	 EOF 
;

// Rule SetLiteral
ruleSetLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetLiteralAccess().getAlternatives()); }
(rule__SetLiteral__Alternatives)
{ after(grammarAccess.getSetLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtom
entryRuleAtom 
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomAccess().getAlternatives()); }
(rule__Atom__Alternatives)
{ after(grammarAccess.getAtomAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePredicateAtom
entryRulePredicateAtom 
:
{ before(grammarAccess.getPredicateAtomRule()); }
	 rulePredicateAtom
{ after(grammarAccess.getPredicateAtomRule()); } 
	 EOF 
;

// Rule PredicateAtom
rulePredicateAtom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPredicateAtomAccess().getGroup()); }
(rule__PredicateAtom__Group__0)
{ after(grammarAccess.getPredicateAtomAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicPredicateAtom
entryRuleBasicPredicateAtom 
:
{ before(grammarAccess.getBasicPredicateAtomRule()); }
	 ruleBasicPredicateAtom
{ after(grammarAccess.getBasicPredicateAtomRule()); } 
	 EOF 
;

// Rule BasicPredicateAtom
ruleBasicPredicateAtom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicPredicateAtomAccess().getGroup()); }
(rule__BasicPredicateAtom__Group__0)
{ after(grammarAccess.getBasicPredicateAtomAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBuiltInAtom
entryRuleBuiltInAtom 
:
{ before(grammarAccess.getBuiltInAtomRule()); }
	 ruleBuiltInAtom
{ after(grammarAccess.getBuiltInAtomRule()); } 
	 EOF 
;

// Rule BuiltInAtom
ruleBuiltInAtom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBuiltInAtomAccess().getGroup()); }
(rule__BuiltInAtom__Group__0)
{ after(grammarAccess.getBuiltInAtomAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicAtom
entryRuleBasicAtom 
:
{ before(grammarAccess.getBasicAtomRule()); }
	 ruleBasicAtom
{ after(grammarAccess.getBasicAtomRule()); } 
	 EOF 
;

// Rule BasicAtom
ruleBasicAtom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicAtomAccess().getAlternatives()); }
(rule__BasicAtom__Alternatives)
{ after(grammarAccess.getBasicAtomAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomOp
entryRuleAtomOp 
:
{ before(grammarAccess.getAtomOpRule()); }
	 ruleAtomOp
{ after(grammarAccess.getAtomOpRule()); } 
	 EOF 
;

// Rule AtomOp
ruleAtomOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomOpAccess().getAlternatives()); }
(rule__AtomOp__Alternatives)
{ after(grammarAccess.getAtomOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSentence
entryRuleSentence 
:
{ before(grammarAccess.getSentenceRule()); }
	 ruleSentence
{ after(grammarAccess.getSentenceRule()); } 
	 EOF 
;

// Rule Sentence
ruleSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSentenceAccess().getOrSentenceParserRuleCall()); }
	ruleOrSentence
{ after(grammarAccess.getSentenceAccess().getOrSentenceParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrSentence
entryRuleOrSentence 
:
{ before(grammarAccess.getOrSentenceRule()); }
	 ruleOrSentence
{ after(grammarAccess.getOrSentenceRule()); } 
	 EOF 
;

// Rule OrSentence
ruleOrSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrSentenceAccess().getGroup()); }
(rule__OrSentence__Group__0)
{ after(grammarAccess.getOrSentenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndSentence
entryRuleAndSentence 
:
{ before(grammarAccess.getAndSentenceRule()); }
	 ruleAndSentence
{ after(grammarAccess.getAndSentenceRule()); } 
	 EOF 
;

// Rule AndSentence
ruleAndSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndSentenceAccess().getGroup()); }
(rule__AndSentence__Group__0)
{ after(grammarAccess.getAndSentenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimarySentence
entryRulePrimarySentence 
:
{ before(grammarAccess.getPrimarySentenceRule()); }
	 rulePrimarySentence
{ after(grammarAccess.getPrimarySentenceRule()); } 
	 EOF 
;

// Rule PrimarySentence
rulePrimarySentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimarySentenceAccess().getAlternatives()); }
(rule__PrimarySentence__Alternatives)
{ after(grammarAccess.getPrimarySentenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSentenceLiteral
entryRuleSentenceLiteral 
:
{ before(grammarAccess.getSentenceLiteralRule()); }
	 ruleSentenceLiteral
{ after(grammarAccess.getSentenceLiteralRule()); } 
	 EOF 
;

// Rule SentenceLiteral
ruleSentenceLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSentenceLiteralAccess().getAlternatives()); }
(rule__SentenceLiteral__Alternatives)
{ after(grammarAccess.getSentenceLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepSentence
entryRulepSentence 
:
{ before(grammarAccess.getPSentenceRule()); }
	 rulepSentence
{ after(grammarAccess.getPSentenceRule()); } 
	 EOF 
;

// Rule pSentence
rulepSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPSentenceAccess().getPOrSentenceParserRuleCall()); }
	rulepOrSentence
{ after(grammarAccess.getPSentenceAccess().getPOrSentenceParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepOrSentence
entryRulepOrSentence 
:
{ before(grammarAccess.getPOrSentenceRule()); }
	 rulepOrSentence
{ after(grammarAccess.getPOrSentenceRule()); } 
	 EOF 
;

// Rule pOrSentence
rulepOrSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPOrSentenceAccess().getGroup()); }
(rule__POrSentence__Group__0)
{ after(grammarAccess.getPOrSentenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepAndSentence
entryRulepAndSentence 
:
{ before(grammarAccess.getPAndSentenceRule()); }
	 rulepAndSentence
{ after(grammarAccess.getPAndSentenceRule()); } 
	 EOF 
;

// Rule pAndSentence
rulepAndSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPAndSentenceAccess().getGroup()); }
(rule__PAndSentence__Group__0)
{ after(grammarAccess.getPAndSentenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepPrimarySentence
entryRulepPrimarySentence 
:
{ before(grammarAccess.getPPrimarySentenceRule()); }
	 rulepPrimarySentence
{ after(grammarAccess.getPPrimarySentenceRule()); } 
	 EOF 
;

// Rule pPrimarySentence
rulepPrimarySentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPPrimarySentenceAccess().getAlternatives()); }
(rule__PPrimarySentence__Alternatives)
{ after(grammarAccess.getPPrimarySentenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepSentenceLiteral
entryRulepSentenceLiteral 
:
{ before(grammarAccess.getPSentenceLiteralRule()); }
	 rulepSentenceLiteral
{ after(grammarAccess.getPSentenceLiteralRule()); } 
	 EOF 
;

// Rule pSentenceLiteral
rulepSentenceLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPSentenceLiteralAccess().getAlternatives()); }
(rule__PSentenceLiteral__Alternatives)
{ after(grammarAccess.getPSentenceLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMaybeLiteral
entryRuleMaybeLiteral 
:
{ before(grammarAccess.getMaybeLiteralRule()); }
	 ruleMaybeLiteral
{ after(grammarAccess.getMaybeLiteralRule()); } 
	 EOF 
;

// Rule MaybeLiteral
ruleMaybeLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMaybeLiteralAccess().getGroup()); }
(rule__MaybeLiteral__Group__0)
{ after(grammarAccess.getMaybeLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCardinalityConstraint
entryRuleCardinalityConstraint 
:
{ before(grammarAccess.getCardinalityConstraintRule()); }
	 ruleCardinalityConstraint
{ after(grammarAccess.getCardinalityConstraintRule()); } 
	 EOF 
;

// Rule CardinalityConstraint
ruleCardinalityConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getGroup()); }
(rule__CardinalityConstraint__Group__0)
{ after(grammarAccess.getCardinalityConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBound
entryRuleBound 
:
{ before(grammarAccess.getBoundRule()); }
	 ruleBound
{ after(grammarAccess.getBoundRule()); } 
	 EOF 
;

// Rule Bound
ruleBound
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoundAccess().getAvAssignment()); }
(rule__Bound__AvAssignment)
{ after(grammarAccess.getBoundAccess().getAvAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getGroup()); }
(rule__Rule__Group__0)
{ after(grammarAccess.getRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHead
entryRuleHead 
:
{ before(grammarAccess.getHeadRule()); }
	 ruleHead
{ after(grammarAccess.getHeadRule()); } 
	 EOF 
;

// Rule Head
ruleHead
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHeadAccess().getAlternatives()); }
(rule__Head__Alternatives)
{ after(grammarAccess.getHeadAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__BasicTerm__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTermAccess().getTypedVariableParserRuleCall_0()); }
	ruleTypedVariable
{ after(grammarAccess.getBasicTermAccess().getTypedVariableParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBasicTermAccess().getArithmeticTermParserRuleCall_1()); }
	ruleArithmeticTerm
{ after(grammarAccess.getBasicTermAccess().getArithmeticTermParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBasicTermAccess().getFunctionalTermParserRuleCall_2()); }
	ruleFunctionalTerm
{ after(grammarAccess.getBasicTermAccess().getFunctionalTermParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1_0()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_1_1()); }

	'-' 

{ after(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1_0()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_1_1()); }

	'/' 

{ after(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_1_1()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_1_2()); }

	'%' 

{ after(grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getTermAssignment_0()); }
(rule__Primary__TermAssignment_0)
{ after(grammarAccess.getPrimaryAccess().getTermAssignment_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
(rule__Primary__Group_1__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticLiteralAccess().getVAssignment_0()); }
(rule__ArithmeticLiteral__VAssignment_0)
{ after(grammarAccess.getArithmeticLiteralAccess().getVAssignment_0()); }
)

    |(
{ before(grammarAccess.getArithmeticLiteralAccess().getTvAssignment_1()); }
(rule__ArithmeticLiteral__TvAssignment_1)
{ after(grammarAccess.getArithmeticLiteralAccess().getTvAssignment_1()); }
)

    |(
{ before(grammarAccess.getArithmeticLiteralAccess().getConstAssignment_2()); }
(rule__ArithmeticLiteral__ConstAssignment_2)
{ after(grammarAccess.getArithmeticLiteralAccess().getConstAssignment_2()); }
)

    |(
{ before(grammarAccess.getArithmeticLiteralAccess().getValueAssignment_3()); }
(rule__ArithmeticLiteral__ValueAssignment_3)
{ after(grammarAccess.getArithmeticLiteralAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroundAddition__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundAdditionAccess().getPlusSignKeyword_1_1_0()); }

	'+' 

{ after(grammarAccess.getGroundAdditionAccess().getPlusSignKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getGroundAdditionAccess().getHyphenMinusKeyword_1_1_1()); }

	'-' 

{ after(grammarAccess.getGroundAdditionAccess().getHyphenMinusKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroundMultiplication__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundMultiplicationAccess().getAsteriskKeyword_1_1_0()); }

	'*' 

{ after(grammarAccess.getGroundMultiplicationAccess().getAsteriskKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getGroundMultiplicationAccess().getSolidusKeyword_1_1_1()); }

	'/' 

{ after(grammarAccess.getGroundMultiplicationAccess().getSolidusKeyword_1_1_1()); }
)

    |(
{ before(grammarAccess.getGroundMultiplicationAccess().getPercentSignKeyword_1_1_2()); }

	'%' 

{ after(grammarAccess.getGroundMultiplicationAccess().getPercentSignKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroundPrimary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundPrimaryAccess().getTermAssignment_0()); }
(rule__GroundPrimary__TermAssignment_0)
{ after(grammarAccess.getGroundPrimaryAccess().getTermAssignment_0()); }
)

    |(
{ before(grammarAccess.getGroundPrimaryAccess().getGroup_1()); }
(rule__GroundPrimary__Group_1__0)
{ after(grammarAccess.getGroundPrimaryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroundArithmeticLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundArithmeticLiteralAccess().getIdentifierAssignment_0()); }
(rule__GroundArithmeticLiteral__IdentifierAssignment_0)
{ after(grammarAccess.getGroundArithmeticLiteralAccess().getIdentifierAssignment_0()); }
)

    |(
{ before(grammarAccess.getGroundArithmeticLiteralAccess().getValueAssignment_1()); }
(rule__GroundArithmeticLiteral__ValueAssignment_1)
{ after(grammarAccess.getGroundArithmeticLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroundTerm__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundTermAccess().getGroundArithmeticTermParserRuleCall_0()); }
	ruleGroundArithmeticTerm
{ after(grammarAccess.getGroundTermAccess().getGroundArithmeticTermParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getGroundTermAccess().getGroundFunctionalTermParserRuleCall_1()); }
	ruleGroundFunctionalTerm
{ after(grammarAccess.getGroundTermAccess().getGroundFunctionalTermParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedTerm__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedTermAccess().getUniversalQuantifiedTermParserRuleCall_0()); }
	ruleUniversalQuantifiedTerm
{ after(grammarAccess.getQuantifiedTermAccess().getUniversalQuantifiedTermParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getQuantifiedTermAccess().getExistentialQuantifiedTermParserRuleCall_1()); }
	ruleExistentialQuantifiedTerm
{ after(grammarAccess.getQuantifiedTermAccess().getExistentialQuantifiedTermParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getBasicTermParserRuleCall_0()); }
	ruleBasicTerm
{ after(grammarAccess.getTermAccess().getBasicTermParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTermAccess().getQuantifiedTermParserRuleCall_1()); }
	ruleQuantifiedTerm
{ after(grammarAccess.getTermAccess().getQuantifiedTermParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetMultiplication__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMultiplicationAccess().getAsteriskKeyword_1_1_0()); }

	'*' 

{ after(grammarAccess.getSetMultiplicationAccess().getAsteriskKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getSetMultiplicationAccess().getReverseSolidusKeyword_1_1_1()); }

	'\\' 

{ after(grammarAccess.getSetMultiplicationAccess().getReverseSolidusKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetPrimary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPrimaryAccess().getSetLiteralParserRuleCall_0()); }
	ruleSetLiteral
{ after(grammarAccess.getSetPrimaryAccess().getSetLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSetPrimaryAccess().getGroup_1()); }
(rule__SetPrimary__Group_1__0)
{ after(grammarAccess.getSetPrimaryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetLiteralAccess().getSetParserRuleCall_0()); }
	ruleSet
{ after(grammarAccess.getSetLiteralAccess().getSetParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSetLiteralAccess().getRangeParserRuleCall_1()); }
	ruleRange
{ after(grammarAccess.getSetLiteralAccess().getRangeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSetLiteralAccess().getSetConstructParserRuleCall_2()); }
	ruleSetConstruct
{ after(grammarAccess.getSetLiteralAccess().getSetConstructParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSetLiteralAccess().getLIDTerminalRuleCall_3()); }
	RULE_LID
{ after(grammarAccess.getSetLiteralAccess().getLIDTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getPredicateAtomParserRuleCall_0()); }
	rulePredicateAtom
{ after(grammarAccess.getAtomAccess().getPredicateAtomParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getBuiltInAtomParserRuleCall_1()); }
	ruleBuiltInAtom
{ after(grammarAccess.getAtomAccess().getBuiltInAtomParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicAtom__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicAtomAccess().getBasicPredicateAtomParserRuleCall_0()); }
	ruleBasicPredicateAtom
{ after(grammarAccess.getBasicAtomAccess().getBasicPredicateAtomParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBasicAtomAccess().getBuiltInAtomParserRuleCall_1()); }
	ruleBuiltInAtom
{ after(grammarAccess.getBasicAtomAccess().getBuiltInAtomParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtomOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomOpAccess().getGreaterThanSignKeyword_0()); }

	'>' 

{ after(grammarAccess.getAtomOpAccess().getGreaterThanSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getAtomOpAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getAtomOpAccess().getLessThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getAtomOpAccess().getGreaterThanSignEqualsSignKeyword_2()); }

	'>=' 

{ after(grammarAccess.getAtomOpAccess().getGreaterThanSignEqualsSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getAtomOpAccess().getLessThanSignEqualsSignKeyword_3()); }

	'<=' 

{ after(grammarAccess.getAtomOpAccess().getLessThanSignEqualsSignKeyword_3()); }
)

    |(
{ before(grammarAccess.getAtomOpAccess().getEqualsSignKeyword_4()); }

	'=' 

{ after(grammarAccess.getAtomOpAccess().getEqualsSignKeyword_4()); }
)

    |(
{ before(grammarAccess.getAtomOpAccess().getExclamationMarkEqualsSignKeyword_5()); }

	'!=' 

{ after(grammarAccess.getAtomOpAccess().getExclamationMarkEqualsSignKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndSentence__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndSentenceAccess().getAndKeyword_1_1_0()); }

	'and' 

{ after(grammarAccess.getAndSentenceAccess().getAndKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getAndSentenceAccess().getCommaKeyword_1_1_1()); }

	',' 

{ after(grammarAccess.getAndSentenceAccess().getCommaKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimarySentence__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimarySentenceAccess().getSentenceLiteralParserRuleCall_0()); }
	ruleSentenceLiteral
{ after(grammarAccess.getPrimarySentenceAccess().getSentenceLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimarySentenceAccess().getGroup_1()); }
(rule__PrimarySentence__Group_1__0)
{ after(grammarAccess.getPrimarySentenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SentenceLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSentenceLiteralAccess().getAtomParserRuleCall_0()); }
	ruleAtom
{ after(grammarAccess.getSentenceLiteralAccess().getAtomParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSentenceLiteralAccess().getGroup_1()); }
(rule__SentenceLiteral__Group_1__0)
{ after(grammarAccess.getSentenceLiteralAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PPrimarySentence__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPPrimarySentenceAccess().getPSentenceLiteralParserRuleCall_0()); }
	rulepSentenceLiteral
{ after(grammarAccess.getPPrimarySentenceAccess().getPSentenceLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPPrimarySentenceAccess().getGroup_1()); }
(rule__PPrimarySentence__Group_1__0)
{ after(grammarAccess.getPPrimarySentenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PSentenceLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPSentenceLiteralAccess().getPredicateAtomParserRuleCall_0()); }
	rulePredicateAtom
{ after(grammarAccess.getPSentenceLiteralAccess().getPredicateAtomParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPSentenceLiteralAccess().getGroup_1()); }
(rule__PSentenceLiteral__Group_1__0)
{ after(grammarAccess.getPSentenceLiteralAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getPSentenceParserRuleCall_0()); }
	rulepSentence
{ after(grammarAccess.getHeadAccess().getPSentenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getHeadAccess().getMaybeLiteralParserRuleCall_1()); }
	ruleMaybeLiteral
{ after(grammarAccess.getHeadAccess().getMaybeLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getHeadAccess().getCardinalityConstraintParserRuleCall_2()); }
	ruleCardinalityConstraint
{ after(grammarAccess.getHeadAccess().getCardinalityConstraintParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getRuleParserRuleCall_0()); }
	ruleRule
{ after(grammarAccess.getStatementAccess().getRuleParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getTypeDeclarationParserRuleCall_1()); }
	ruleTypeDeclaration
{ after(grammarAccess.getStatementAccess().getTypeDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getConstantDeclarationParserRuleCall_2()); }
	ruleConstantDeclaration
{ after(grammarAccess.getStatementAccess().getConstantDeclarationParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__TypedVariable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedVariable__Group__0__Impl
	rule__TypedVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedVariableAccess().getNameAssignment_0()); }
(rule__TypedVariable__NameAssignment_0)
{ after(grammarAccess.getTypedVariableAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedVariable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedVariable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedVariableAccess().getVarAssignment_1()); }
(rule__TypedVariable__VarAssignment_1)
{ after(grammarAccess.getTypedVariableAccess().getVarAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAdditionLhsAction_1_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getAdditionLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAlternatives_1_1()); }
(rule__Addition__Alternatives_1_1)
{ after(grammarAccess.getAdditionAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRhsAssignment_1_2()); }
(rule__Addition__RhsAssignment_1_2)
{ after(grammarAccess.getAdditionAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
{ after(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLhsAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAlternatives_1_1()); }
(rule__Multiplication__Alternatives_1_1)
{ after(grammarAccess.getMultiplicationAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRhsAssignment_1_2()); }
(rule__Multiplication__RhsAssignment_1_2)
{ after(grammarAccess.getMultiplicationAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Primary__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getTermAssignment_1_1()); }
(rule__Primary__TermAssignment_1_1)
{ after(grammarAccess.getPrimaryAccess().getTermAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GroundAddition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundAddition__Group__0__Impl
	rule__GroundAddition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundAddition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundAdditionAccess().getGroundMultiplicationParserRuleCall_0()); }
	ruleGroundMultiplication
{ after(grammarAccess.getGroundAdditionAccess().getGroundMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroundAddition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundAddition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundAddition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundAdditionAccess().getGroup_1()); }
(rule__GroundAddition__Group_1__0)*
{ after(grammarAccess.getGroundAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroundAddition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundAddition__Group_1__0__Impl
	rule__GroundAddition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundAddition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundAdditionAccess().getGroundAdditionLhsAction_1_0()); }
(

)
{ after(grammarAccess.getGroundAdditionAccess().getGroundAdditionLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroundAddition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundAddition__Group_1__1__Impl
	rule__GroundAddition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundAddition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundAdditionAccess().getAlternatives_1_1()); }
(rule__GroundAddition__Alternatives_1_1)
{ after(grammarAccess.getGroundAdditionAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroundAddition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundAddition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundAddition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundAdditionAccess().getRhsAssignment_1_2()); }
(rule__GroundAddition__RhsAssignment_1_2)
{ after(grammarAccess.getGroundAdditionAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GroundMultiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundMultiplication__Group__0__Impl
	rule__GroundMultiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundMultiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundMultiplicationAccess().getGroundPrimaryParserRuleCall_0()); }
	ruleGroundPrimary
{ after(grammarAccess.getGroundMultiplicationAccess().getGroundPrimaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroundMultiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundMultiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundMultiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundMultiplicationAccess().getGroup_1()); }
(rule__GroundMultiplication__Group_1__0)*
{ after(grammarAccess.getGroundMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroundMultiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundMultiplication__Group_1__0__Impl
	rule__GroundMultiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundMultiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundMultiplicationAccess().getGroundMultiplicationLhsAction_1_0()); }
(

)
{ after(grammarAccess.getGroundMultiplicationAccess().getGroundMultiplicationLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroundMultiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundMultiplication__Group_1__1__Impl
	rule__GroundMultiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundMultiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundMultiplicationAccess().getAlternatives_1_1()); }
(rule__GroundMultiplication__Alternatives_1_1)
{ after(grammarAccess.getGroundMultiplicationAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroundMultiplication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundMultiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundMultiplication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundMultiplicationAccess().getRhsAssignment_1_2()); }
(rule__GroundMultiplication__RhsAssignment_1_2)
{ after(grammarAccess.getGroundMultiplicationAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GroundPrimary__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundPrimary__Group_1__0__Impl
	rule__GroundPrimary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundPrimary__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundPrimaryAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getGroundPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroundPrimary__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundPrimary__Group_1__1__Impl
	rule__GroundPrimary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundPrimary__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundPrimaryAccess().getTermAssignment_1_1()); }
(rule__GroundPrimary__TermAssignment_1_1)
{ after(grammarAccess.getGroundPrimaryAccess().getTermAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroundPrimary__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundPrimary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundPrimary__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundPrimaryAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getGroundPrimaryAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionalTerm__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionalTerm__Group__0__Impl
	rule__FunctionalTerm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionalTerm__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionalTermAccess().getLIDTerminalRuleCall_0()); }
	RULE_LID
{ after(grammarAccess.getFunctionalTermAccess().getLIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionalTerm__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionalTerm__Group__1__Impl
	rule__FunctionalTerm__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionalTerm__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionalTermAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionalTermAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionalTerm__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionalTerm__Group__2__Impl
	rule__FunctionalTerm__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionalTerm__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionalTermAccess().getTermsParserRuleCall_2()); }
	ruleTerms
{ after(grammarAccess.getFunctionalTermAccess().getTermsParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionalTerm__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionalTerm__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionalTerm__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionalTermAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getFunctionalTermAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__GroundFunctionalTerm__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundFunctionalTerm__Group__0__Impl
	rule__GroundFunctionalTerm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundFunctionalTerm__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundFunctionalTermAccess().getLIDTerminalRuleCall_0()); }
	RULE_LID
{ after(grammarAccess.getGroundFunctionalTermAccess().getLIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroundFunctionalTerm__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundFunctionalTerm__Group__1__Impl
	rule__GroundFunctionalTerm__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundFunctionalTerm__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundFunctionalTermAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getGroundFunctionalTermAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroundFunctionalTerm__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundFunctionalTerm__Group__2__Impl
	rule__GroundFunctionalTerm__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundFunctionalTerm__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundFunctionalTermAccess().getGroundTermsParserRuleCall_2()); }
	ruleGroundTerms
{ after(grammarAccess.getGroundFunctionalTermAccess().getGroundTermsParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroundFunctionalTerm__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundFunctionalTerm__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundFunctionalTerm__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundFunctionalTermAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getGroundFunctionalTermAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BasicTerms__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicTerms__Group__0__Impl
	rule__BasicTerms__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicTerms__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTermsAccess().getCarAssignment_0()); }
(rule__BasicTerms__CarAssignment_0)
{ after(grammarAccess.getBasicTermsAccess().getCarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicTerms__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicTerms__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicTerms__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTermsAccess().getGroup_1()); }
(rule__BasicTerms__Group_1__0)*
{ after(grammarAccess.getBasicTermsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BasicTerms__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicTerms__Group_1__0__Impl
	rule__BasicTerms__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicTerms__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTermsAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getBasicTermsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicTerms__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicTerms__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicTerms__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTermsAccess().getCdrAssignment_1_1()); }
(rule__BasicTerms__CdrAssignment_1_1)
{ after(grammarAccess.getBasicTermsAccess().getCdrAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroundTerms__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundTerms__Group__0__Impl
	rule__GroundTerms__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundTerms__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundTermsAccess().getCarAssignment_0()); }
(rule__GroundTerms__CarAssignment_0)
{ after(grammarAccess.getGroundTermsAccess().getCarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroundTerms__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundTerms__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundTerms__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundTermsAccess().getGroup_1()); }
(rule__GroundTerms__Group_1__0)*
{ after(grammarAccess.getGroundTermsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroundTerms__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundTerms__Group_1__0__Impl
	rule__GroundTerms__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundTerms__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundTermsAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getGroundTermsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroundTerms__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroundTerms__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroundTerms__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundTermsAccess().getCdrAssignment_1_1()); }
(rule__GroundTerms__CdrAssignment_1_1)
{ after(grammarAccess.getGroundTermsAccess().getCdrAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UniversalQuantifiedTerm__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UniversalQuantifiedTerm__Group__0__Impl
	rule__UniversalQuantifiedTerm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UniversalQuantifiedTerm__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUniversalQuantifiedTermAccess().getEveryKeyword_0()); }

	'every' 

{ after(grammarAccess.getUniversalQuantifiedTermAccess().getEveryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UniversalQuantifiedTerm__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UniversalQuantifiedTerm__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UniversalQuantifiedTerm__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUniversalQuantifiedTermAccess().getNameAssignment_1()); }
(rule__UniversalQuantifiedTerm__NameAssignment_1)
{ after(grammarAccess.getUniversalQuantifiedTermAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExistentialQuantifiedTerm__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistentialQuantifiedTerm__Group__0__Impl
	rule__ExistentialQuantifiedTerm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistentialQuantifiedTerm__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistentialQuantifiedTermAccess().getSomeKeyword_0()); }

	'some' 

{ after(grammarAccess.getExistentialQuantifiedTermAccess().getSomeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistentialQuantifiedTerm__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistentialQuantifiedTerm__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistentialQuantifiedTerm__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistentialQuantifiedTermAccess().getNameAssignment_1()); }
(rule__ExistentialQuantifiedTerm__NameAssignment_1)
{ after(grammarAccess.getExistentialQuantifiedTermAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Terms__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terms__Group__0__Impl
	rule__Terms__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terms__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermsAccess().getCarAssignment_0()); }
(rule__Terms__CarAssignment_0)
{ after(grammarAccess.getTermsAccess().getCarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Terms__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terms__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terms__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermsAccess().getGroup_1()); }
(rule__Terms__Group_1__0)*
{ after(grammarAccess.getTermsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Terms__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terms__Group_1__0__Impl
	rule__Terms__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terms__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermsAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getTermsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Terms__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Terms__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terms__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermsAccess().getCdrAssignment_1_1()); }
(rule__Terms__CdrAssignment_1_1)
{ after(grammarAccess.getTermsAccess().getCdrAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstantDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__0__Impl
	rule__ConstantDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getConstKeyword_0()); }

	'const' 

{ after(grammarAccess.getConstantDeclarationAccess().getConstKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__1__Impl
	rule__ConstantDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getNameAssignment_1()); }
(rule__ConstantDeclaration__NameAssignment_1)
{ after(grammarAccess.getConstantDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__2__Impl
	rule__ConstantDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getConstantDeclarationAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__3__Impl
	rule__ConstantDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getCvAssignment_3()); }
(rule__ConstantDeclaration__CvAssignment_3)
{ after(grammarAccess.getConstantDeclarationAccess().getCvAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getFullStopKeyword_4()); }

	'.' 

{ after(grammarAccess.getConstantDeclarationAccess().getFullStopKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__TypeDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__0__Impl
	rule__TypeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getTypeKeyword_0()); }

	'type' 

{ after(grammarAccess.getTypeDeclarationAccess().getTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__1__Impl
	rule__TypeDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getNameAssignment_1()); }
(rule__TypeDeclaration__NameAssignment_1)
{ after(grammarAccess.getTypeDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__2__Impl
	rule__TypeDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__3__Impl
	rule__TypeDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getExpAssignment_3()); }
(rule__TypeDeclaration__ExpAssignment_3)
{ after(grammarAccess.getTypeDeclarationAccess().getExpAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getFullStopKeyword_4()); }

	'.' 

{ after(grammarAccess.getTypeDeclarationAccess().getFullStopKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Set__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__0__Impl
	rule__Set__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getLhsAssignment_0()); }
(rule__Set__LhsAssignment_0)
{ after(grammarAccess.getSetAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__1__Impl
	rule__Set__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getTermsAssignment_1()); }
(rule__Set__TermsAssignment_1)
{ after(grammarAccess.getSetAccess().getTermsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getSetAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Range__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__0__Impl
	rule__Range__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getRangeAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__1__Impl
	rule__Range__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getLhsAssignment_1()); }
(rule__Range__LhsAssignment_1)
{ after(grammarAccess.getRangeAccess().getLhsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__2__Impl
	rule__Range__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getRangeAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__3__Impl
	rule__Range__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getFullStopKeyword_3()); }

	'.' 

{ after(grammarAccess.getRangeAccess().getFullStopKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__4__Impl
	rule__Range__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getRhsAssignment_4()); }
(rule__Range__RhsAssignment_4)
{ after(grammarAccess.getRangeAccess().getRhsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getRangeAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SetConstruct__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetConstruct__Group__0__Impl
	rule__SetConstruct__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetConstruct__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetConstructAccess().getLhsAssignment_0()); }
(rule__SetConstruct__LhsAssignment_0)
{ after(grammarAccess.getSetConstructAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetConstruct__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetConstruct__Group__1__Impl
	rule__SetConstruct__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetConstruct__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetConstructAccess().getWhereKeyword_1()); }

	'where' 

{ after(grammarAccess.getSetConstructAccess().getWhereKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetConstruct__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetConstruct__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetConstruct__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetConstructAccess().getRhsAssignment_2()); }
(rule__SetConstruct__RhsAssignment_2)
{ after(grammarAccess.getSetConstructAccess().getRhsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TVars__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TVars__Group__0__Impl
	rule__TVars__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TVars__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarsAccess().getCarAssignment_0()); }
(rule__TVars__CarAssignment_0)
{ after(grammarAccess.getTVarsAccess().getCarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TVars__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TVars__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TVars__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarsAccess().getGroup_1()); }
(rule__TVars__Group_1__0)*
{ after(grammarAccess.getTVarsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TVars__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TVars__Group_1__0__Impl
	rule__TVars__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TVars__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarsAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getTVarsAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TVars__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TVars__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TVars__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarsAccess().getCdrAssignment_1_1()); }
(rule__TVars__CdrAssignment_1_1)
{ after(grammarAccess.getTVarsAccess().getCdrAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TVar__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TVar__Group__0__Impl
	rule__TVar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TVar__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarAccess().getVarAssignment_0()); }
(rule__TVar__VarAssignment_0)
{ after(grammarAccess.getTVarAccess().getVarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TVar__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TVar__Group__1__Impl
	rule__TVar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TVar__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarAccess().getInKeyword_1()); }

	'in' 

{ after(grammarAccess.getTVarAccess().getInKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TVar__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TVar__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TVar__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarAccess().getIdAssignment_2()); }
(rule__TVar__IdAssignment_2)
{ after(grammarAccess.getTVarAccess().getIdAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SetAddition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetAddition__Group__0__Impl
	rule__SetAddition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetAddition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAdditionAccess().getSetMultiplicationParserRuleCall_0()); }
	ruleSetMultiplication
{ after(grammarAccess.getSetAdditionAccess().getSetMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetAddition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetAddition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetAddition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAdditionAccess().getGroup_1()); }
(rule__SetAddition__Group_1__0)*
{ after(grammarAccess.getSetAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SetAddition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetAddition__Group_1__0__Impl
	rule__SetAddition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetAddition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAdditionAccess().getSetAdditionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getSetAdditionAccess().getSetAdditionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetAddition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetAddition__Group_1__1__Impl
	rule__SetAddition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetAddition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAdditionAccess().getPlusSignKeyword_1_1()); }

	'+' 

{ after(grammarAccess.getSetAdditionAccess().getPlusSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetAddition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetAddition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetAddition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAdditionAccess().getRightAssignment_1_2()); }
(rule__SetAddition__RightAssignment_1_2)
{ after(grammarAccess.getSetAdditionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SetMultiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetMultiplication__Group__0__Impl
	rule__SetMultiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetMultiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMultiplicationAccess().getSetPrimaryParserRuleCall_0()); }
	ruleSetPrimary
{ after(grammarAccess.getSetMultiplicationAccess().getSetPrimaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetMultiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetMultiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetMultiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMultiplicationAccess().getGroup_1()); }
(rule__SetMultiplication__Group_1__0)*
{ after(grammarAccess.getSetMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SetMultiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetMultiplication__Group_1__0__Impl
	rule__SetMultiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetMultiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMultiplicationAccess().getSetMultiplicationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getSetMultiplicationAccess().getSetMultiplicationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetMultiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetMultiplication__Group_1__1__Impl
	rule__SetMultiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetMultiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMultiplicationAccess().getAlternatives_1_1()); }
(rule__SetMultiplication__Alternatives_1_1)
{ after(grammarAccess.getSetMultiplicationAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetMultiplication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetMultiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetMultiplication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMultiplicationAccess().getRightAssignment_1_2()); }
(rule__SetMultiplication__RightAssignment_1_2)
{ after(grammarAccess.getSetMultiplicationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SetPrimary__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetPrimary__Group_1__0__Impl
	rule__SetPrimary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPrimary__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPrimaryAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getSetPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetPrimary__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetPrimary__Group_1__1__Impl
	rule__SetPrimary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPrimary__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPrimaryAccess().getSetAdditionParserRuleCall_1_1()); }
	ruleSetAddition
{ after(grammarAccess.getSetPrimaryAccess().getSetAdditionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetPrimary__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetPrimary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPrimary__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetPrimaryAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getSetPrimaryAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PredicateAtom__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateAtom__Group__0__Impl
	rule__PredicateAtom__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateAtom__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAtomAccess().getFidAssignment_0()); }
(rule__PredicateAtom__FidAssignment_0)
{ after(grammarAccess.getPredicateAtomAccess().getFidAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateAtom__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateAtom__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateAtom__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAtomAccess().getGroup_1()); }
(rule__PredicateAtom__Group_1__0)?
{ after(grammarAccess.getPredicateAtomAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PredicateAtom__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateAtom__Group_1__0__Impl
	rule__PredicateAtom__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateAtom__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAtomAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPredicateAtomAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateAtom__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateAtom__Group_1__1__Impl
	rule__PredicateAtom__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateAtom__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAtomAccess().getTermsAssignment_1_1()); }
(rule__PredicateAtom__TermsAssignment_1_1)
{ after(grammarAccess.getPredicateAtomAccess().getTermsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PredicateAtom__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PredicateAtom__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateAtom__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAtomAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPredicateAtomAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BasicPredicateAtom__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicPredicateAtom__Group__0__Impl
	rule__BasicPredicateAtom__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicPredicateAtom__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicPredicateAtomAccess().getFidAssignment_0()); }
(rule__BasicPredicateAtom__FidAssignment_0)
{ after(grammarAccess.getBasicPredicateAtomAccess().getFidAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicPredicateAtom__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicPredicateAtom__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicPredicateAtom__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicPredicateAtomAccess().getGroup_1()); }
(rule__BasicPredicateAtom__Group_1__0)?
{ after(grammarAccess.getBasicPredicateAtomAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BasicPredicateAtom__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicPredicateAtom__Group_1__0__Impl
	rule__BasicPredicateAtom__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicPredicateAtom__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicPredicateAtomAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getBasicPredicateAtomAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicPredicateAtom__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicPredicateAtom__Group_1__1__Impl
	rule__BasicPredicateAtom__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicPredicateAtom__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicPredicateAtomAccess().getTermsAssignment_1_1()); }
(rule__BasicPredicateAtom__TermsAssignment_1_1)
{ after(grammarAccess.getBasicPredicateAtomAccess().getTermsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicPredicateAtom__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicPredicateAtom__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicPredicateAtom__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicPredicateAtomAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getBasicPredicateAtomAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BuiltInAtom__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltInAtom__Group__0__Impl
	rule__BuiltInAtom__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInAtom__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInAtomAccess().getLhsAssignment_0()); }
(rule__BuiltInAtom__LhsAssignment_0)
{ after(grammarAccess.getBuiltInAtomAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BuiltInAtom__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltInAtom__Group__1__Impl
	rule__BuiltInAtom__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInAtom__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInAtomAccess().getOpAssignment_1()); }
(rule__BuiltInAtom__OpAssignment_1)
{ after(grammarAccess.getBuiltInAtomAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BuiltInAtom__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltInAtom__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInAtom__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInAtomAccess().getRhsAssignment_2()); }
(rule__BuiltInAtom__RhsAssignment_2)
{ after(grammarAccess.getBuiltInAtomAccess().getRhsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrSentence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrSentence__Group__0__Impl
	rule__OrSentence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrSentence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrSentenceAccess().getAndSentenceParserRuleCall_0()); }
	ruleAndSentence
{ after(grammarAccess.getOrSentenceAccess().getAndSentenceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrSentence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrSentence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrSentence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrSentenceAccess().getGroup_1()); }
(rule__OrSentence__Group_1__0)*
{ after(grammarAccess.getOrSentenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrSentence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrSentence__Group_1__0__Impl
	rule__OrSentence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrSentence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrSentenceAccess().getOrSentenceLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOrSentenceAccess().getOrSentenceLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrSentence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrSentence__Group_1__1__Impl
	rule__OrSentence__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrSentence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrSentenceAccess().getOrKeyword_1_1()); }

	'or' 

{ after(grammarAccess.getOrSentenceAccess().getOrKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrSentence__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrSentence__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrSentence__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrSentenceAccess().getRightAssignment_1_2()); }
(rule__OrSentence__RightAssignment_1_2)
{ after(grammarAccess.getOrSentenceAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndSentence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndSentence__Group__0__Impl
	rule__AndSentence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndSentence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndSentenceAccess().getPrimarySentenceParserRuleCall_0()); }
	rulePrimarySentence
{ after(grammarAccess.getAndSentenceAccess().getPrimarySentenceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndSentence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndSentence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndSentence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndSentenceAccess().getGroup_1()); }
(rule__AndSentence__Group_1__0)*
{ after(grammarAccess.getAndSentenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndSentence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndSentence__Group_1__0__Impl
	rule__AndSentence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndSentence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndSentenceAccess().getAndSentenceLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndSentenceAccess().getAndSentenceLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndSentence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndSentence__Group_1__1__Impl
	rule__AndSentence__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndSentence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndSentenceAccess().getAlternatives_1_1()); }
(rule__AndSentence__Alternatives_1_1)
{ after(grammarAccess.getAndSentenceAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndSentence__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndSentence__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndSentence__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndSentenceAccess().getRightAssignment_1_2()); }
(rule__AndSentence__RightAssignment_1_2)
{ after(grammarAccess.getAndSentenceAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimarySentence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimarySentence__Group_1__0__Impl
	rule__PrimarySentence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimarySentence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimarySentenceAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPrimarySentenceAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimarySentence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimarySentence__Group_1__1__Impl
	rule__PrimarySentence__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimarySentence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimarySentenceAccess().getOrSentenceParserRuleCall_1_1()); }
	ruleOrSentence
{ after(grammarAccess.getPrimarySentenceAccess().getOrSentenceParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimarySentence__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimarySentence__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimarySentence__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimarySentenceAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPrimarySentenceAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SentenceLiteral__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SentenceLiteral__Group_1__0__Impl
	rule__SentenceLiteral__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SentenceLiteral__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSentenceLiteralAccess().getNotKeyword_1_0()); }

	'not' 

{ after(grammarAccess.getSentenceLiteralAccess().getNotKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SentenceLiteral__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SentenceLiteral__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SentenceLiteral__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSentenceLiteralAccess().getBasicAtomParserRuleCall_1_1()); }
	ruleBasicAtom
{ after(grammarAccess.getSentenceLiteralAccess().getBasicAtomParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__POrSentence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__POrSentence__Group__0__Impl
	rule__POrSentence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__POrSentence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPOrSentenceAccess().getPAndSentenceParserRuleCall_0()); }
	rulepAndSentence
{ after(grammarAccess.getPOrSentenceAccess().getPAndSentenceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__POrSentence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__POrSentence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__POrSentence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPOrSentenceAccess().getGroup_1()); }
(rule__POrSentence__Group_1__0)*
{ after(grammarAccess.getPOrSentenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__POrSentence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__POrSentence__Group_1__0__Impl
	rule__POrSentence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__POrSentence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPOrSentenceAccess().getPOrSentenceLeftAction_1_0()); }
(

)
{ after(grammarAccess.getPOrSentenceAccess().getPOrSentenceLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__POrSentence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__POrSentence__Group_1__1__Impl
	rule__POrSentence__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__POrSentence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPOrSentenceAccess().getOrKeyword_1_1()); }

	'or' 

{ after(grammarAccess.getPOrSentenceAccess().getOrKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__POrSentence__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__POrSentence__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__POrSentence__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPOrSentenceAccess().getRightAssignment_1_2()); }
(rule__POrSentence__RightAssignment_1_2)
{ after(grammarAccess.getPOrSentenceAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PAndSentence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PAndSentence__Group__0__Impl
	rule__PAndSentence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PAndSentence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPAndSentenceAccess().getPPrimarySentenceParserRuleCall_0()); }
	rulepPrimarySentence
{ after(grammarAccess.getPAndSentenceAccess().getPPrimarySentenceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PAndSentence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PAndSentence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PAndSentence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPAndSentenceAccess().getGroup_1()); }
(rule__PAndSentence__Group_1__0)*
{ after(grammarAccess.getPAndSentenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PAndSentence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PAndSentence__Group_1__0__Impl
	rule__PAndSentence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PAndSentence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPAndSentenceAccess().getPAndSentenceLeftAction_1_0()); }
(

)
{ after(grammarAccess.getPAndSentenceAccess().getPAndSentenceLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PAndSentence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PAndSentence__Group_1__1__Impl
	rule__PAndSentence__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PAndSentence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPAndSentenceAccess().getAndKeyword_1_1()); }

	'and' 

{ after(grammarAccess.getPAndSentenceAccess().getAndKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PAndSentence__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PAndSentence__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PAndSentence__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPAndSentenceAccess().getRightAssignment_1_2()); }
(rule__PAndSentence__RightAssignment_1_2)
{ after(grammarAccess.getPAndSentenceAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PPrimarySentence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PPrimarySentence__Group_1__0__Impl
	rule__PPrimarySentence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PPrimarySentence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPPrimarySentenceAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPPrimarySentenceAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PPrimarySentence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PPrimarySentence__Group_1__1__Impl
	rule__PPrimarySentence__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PPrimarySentence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPPrimarySentenceAccess().getPOrSentenceParserRuleCall_1_1()); }
	rulepOrSentence
{ after(grammarAccess.getPPrimarySentenceAccess().getPOrSentenceParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PPrimarySentence__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PPrimarySentence__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PPrimarySentence__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPPrimarySentenceAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPPrimarySentenceAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PSentenceLiteral__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PSentenceLiteral__Group_1__0__Impl
	rule__PSentenceLiteral__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PSentenceLiteral__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPSentenceLiteralAccess().getNotKeyword_1_0()); }

	'not' 

{ after(grammarAccess.getPSentenceLiteralAccess().getNotKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PSentenceLiteral__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PSentenceLiteral__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PSentenceLiteral__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPSentenceLiteralAccess().getBasicPredicateAtomParserRuleCall_1_1()); }
	ruleBasicPredicateAtom
{ after(grammarAccess.getPSentenceLiteralAccess().getBasicPredicateAtomParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MaybeLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaybeLiteral__Group__0__Impl
	rule__MaybeLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MaybeLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaybeLiteralAccess().getMaybeKeyword_0()); }

	'maybe' 

{ after(grammarAccess.getMaybeLiteralAccess().getMaybeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MaybeLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MaybeLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MaybeLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMaybeLiteralAccess().getBasicPredicateAtomParserRuleCall_1()); }
	ruleBasicPredicateAtom
{ after(grammarAccess.getMaybeLiteralAccess().getBasicPredicateAtomParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CardinalityConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__0__Impl
	rule__CardinalityConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getLhsAssignment_0()); }
(rule__CardinalityConstraint__LhsAssignment_0)
{ after(grammarAccess.getCardinalityConstraintAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__1__Impl
	rule__CardinalityConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getLessThanSignEqualsSignKeyword_1()); }

	'<=' 

{ after(grammarAccess.getCardinalityConstraintAccess().getLessThanSignEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__2__Impl
	rule__CardinalityConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getVerticalLineKeyword_2()); }

	'|' 

{ after(grammarAccess.getCardinalityConstraintAccess().getVerticalLineKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__3__Impl
	rule__CardinalityConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getCardinalityConstraintAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__4__Impl
	rule__CardinalityConstraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getAtomAssignment_4()); }
(rule__CardinalityConstraint__AtomAssignment_4)
{ after(grammarAccess.getCardinalityConstraintAccess().getAtomAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__5__Impl
	rule__CardinalityConstraint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getCardinalityConstraintAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__6__Impl
	rule__CardinalityConstraint__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getVerticalLineKeyword_6()); }

	'|' 

{ after(grammarAccess.getCardinalityConstraintAccess().getVerticalLineKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__7__Impl
	rule__CardinalityConstraint__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getLessThanSignEqualsSignKeyword_7()); }

	'<=' 

{ after(grammarAccess.getCardinalityConstraintAccess().getLessThanSignEqualsSignKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityConstraint__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CardinalityConstraint__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getRhsAssignment_8()); }
(rule__CardinalityConstraint__RhsAssignment_8)
{ after(grammarAccess.getCardinalityConstraintAccess().getRhsAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__Rule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getHeadAssignment_0()); }
(rule__Rule__HeadAssignment_0)
{ after(grammarAccess.getRuleAccess().getHeadAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getGroup_1()); }
(rule__Rule__Group_1__0)?
{ after(grammarAccess.getRuleAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getRuleAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Rule__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_1__0__Impl
	rule__Rule__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getConditionAssignment_1_0()); }
(rule__Rule__ConditionAssignment_1_0)
{ after(grammarAccess.getRuleAccess().getConditionAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getBodyAssignment_1_1()); }
(rule__Rule__BodyAssignment_1_1)
{ after(grammarAccess.getRuleAccess().getBodyAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Program__StatementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_0()); }
	ruleStatement{ after(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__IdentifierAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getIdentifierUIDTerminalRuleCall_0()); }
	RULE_UID{ after(grammarAccess.getVariableAccess().getIdentifierUIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariable__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedVariableAccess().getNameLIDTerminalRuleCall_0_0()); }
	RULE_LID{ after(grammarAccess.getTypedVariableAccess().getNameLIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariable__VarAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedVariableAccess().getVarVariableParserRuleCall_1_0()); }
	ruleVariable{ after(grammarAccess.getTypedVariableAccess().getVarVariableParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRhsMultiplicationParserRuleCall_1_2_0()); }
	ruleMultiplication{ after(grammarAccess.getAdditionAccess().getRhsMultiplicationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRhsPrimaryParserRuleCall_1_2_0()); }
	rulePrimary{ after(grammarAccess.getMultiplicationAccess().getRhsPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__TermAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getTermArithmeticLiteralParserRuleCall_0_0()); }
	ruleArithmeticLiteral{ after(grammarAccess.getPrimaryAccess().getTermArithmeticLiteralParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__TermAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getTermAdditionParserRuleCall_1_1_0()); }
	ruleAddition{ after(grammarAccess.getPrimaryAccess().getTermAdditionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticLiteral__VAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticLiteralAccess().getVVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getArithmeticLiteralAccess().getVVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticLiteral__TvAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticLiteralAccess().getTvTypedVariableParserRuleCall_1_0()); }
	ruleTypedVariable{ after(grammarAccess.getArithmeticLiteralAccess().getTvTypedVariableParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticLiteral__ConstAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticLiteralAccess().getConstLIDTerminalRuleCall_2_0()); }
	RULE_LID{ after(grammarAccess.getArithmeticLiteralAccess().getConstLIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticLiteral__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticLiteralAccess().getValueNUMERIC_CONSTANTTerminalRuleCall_3_0()); }
	RULE_NUMERIC_CONSTANT{ after(grammarAccess.getArithmeticLiteralAccess().getValueNUMERIC_CONSTANTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroundAddition__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundAdditionAccess().getRhsGroundMultiplicationParserRuleCall_1_2_0()); }
	ruleGroundMultiplication{ after(grammarAccess.getGroundAdditionAccess().getRhsGroundMultiplicationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroundMultiplication__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundMultiplicationAccess().getRhsPrimaryParserRuleCall_1_2_0()); }
	rulePrimary{ after(grammarAccess.getGroundMultiplicationAccess().getRhsPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroundPrimary__TermAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundPrimaryAccess().getTermGroundArithmeticLiteralParserRuleCall_0_0()); }
	ruleGroundArithmeticLiteral{ after(grammarAccess.getGroundPrimaryAccess().getTermGroundArithmeticLiteralParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroundPrimary__TermAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundPrimaryAccess().getTermAdditionParserRuleCall_1_1_0()); }
	ruleAddition{ after(grammarAccess.getGroundPrimaryAccess().getTermAdditionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroundArithmeticLiteral__IdentifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundArithmeticLiteralAccess().getIdentifierLIDTerminalRuleCall_0_0()); }
	RULE_LID{ after(grammarAccess.getGroundArithmeticLiteralAccess().getIdentifierLIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroundArithmeticLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundArithmeticLiteralAccess().getValueNUMERIC_CONSTANTTerminalRuleCall_1_0()); }
	RULE_NUMERIC_CONSTANT{ after(grammarAccess.getGroundArithmeticLiteralAccess().getValueNUMERIC_CONSTANTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicTerms__CarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTermsAccess().getCarBasicTermParserRuleCall_0_0()); }
	ruleBasicTerm{ after(grammarAccess.getBasicTermsAccess().getCarBasicTermParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicTerms__CdrAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTermsAccess().getCdrBasicTermParserRuleCall_1_1_0()); }
	ruleBasicTerm{ after(grammarAccess.getBasicTermsAccess().getCdrBasicTermParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroundTerms__CarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundTermsAccess().getCarGroundTermParserRuleCall_0_0()); }
	ruleGroundTerm{ after(grammarAccess.getGroundTermsAccess().getCarGroundTermParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroundTerms__CdrAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroundTermsAccess().getCdrGroundTermParserRuleCall_1_1_0()); }
	ruleGroundTerm{ after(grammarAccess.getGroundTermsAccess().getCdrGroundTermParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UniversalQuantifiedTerm__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUniversalQuantifiedTermAccess().getNameTypeIdParserRuleCall_1_0()); }
	ruleTypeId{ after(grammarAccess.getUniversalQuantifiedTermAccess().getNameTypeIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistentialQuantifiedTerm__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistentialQuantifiedTermAccess().getNameTypeIdParserRuleCall_1_0()); }
	ruleTypeId{ after(grammarAccess.getExistentialQuantifiedTermAccess().getNameTypeIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Terms__CarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermsAccess().getCarTermParserRuleCall_0_0()); }
	ruleTerm{ after(grammarAccess.getTermsAccess().getCarTermParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Terms__CdrAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermsAccess().getCdrTermParserRuleCall_1_1_0()); }
	ruleTerm{ after(grammarAccess.getTermsAccess().getCdrTermParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getNameLIDTerminalRuleCall_1_0()); }
	RULE_LID{ after(grammarAccess.getConstantDeclarationAccess().getNameLIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__CvAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getCvGroundArithmeticTermParserRuleCall_3_0()); }
	ruleGroundArithmeticTerm{ after(grammarAccess.getConstantDeclarationAccess().getCvGroundArithmeticTermParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeId__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeIdAccess().getNameLIDTerminalRuleCall_0()); }
	RULE_LID{ after(grammarAccess.getTypeIdAccess().getNameLIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getNameTypeIdParserRuleCall_1_0()); }
	ruleTypeId{ after(grammarAccess.getTypeDeclarationAccess().getNameTypeIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__ExpAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getExpSetExpressionParserRuleCall_3_0()); }
	ruleSetExpression{ after(grammarAccess.getTypeDeclarationAccess().getExpSetExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__CvAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitAccess().getCvGroundArithmeticTermParserRuleCall_0()); }
	ruleGroundArithmeticTerm{ after(grammarAccess.getLimitAccess().getCvGroundArithmeticTermParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Set__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getLhsLeftCurlyBracketKeyword_0_0()); }
(
{ before(grammarAccess.getSetAccess().getLhsLeftCurlyBracketKeyword_0_0()); }

	'{' 

{ after(grammarAccess.getSetAccess().getLhsLeftCurlyBracketKeyword_0_0()); }
)

{ after(grammarAccess.getSetAccess().getLhsLeftCurlyBracketKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Set__TermsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getTermsGroundTermsParserRuleCall_1_0()); }
	ruleGroundTerms{ after(grammarAccess.getSetAccess().getTermsGroundTermsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Range__LhsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getLhsLimitParserRuleCall_1_0()); }
	ruleLimit{ after(grammarAccess.getRangeAccess().getLhsLimitParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Range__RhsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getRhsLimitParserRuleCall_4_0()); }
	ruleLimit{ after(grammarAccess.getRangeAccess().getRhsLimitParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetConstruct__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetConstructAccess().getLhsBasicTermParserRuleCall_0_0()); }
	ruleBasicTerm{ after(grammarAccess.getSetConstructAccess().getLhsBasicTermParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetConstruct__RhsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetConstructAccess().getRhsTVarsParserRuleCall_2_0()); }
	ruleTVars{ after(grammarAccess.getSetConstructAccess().getRhsTVarsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TVars__CarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarsAccess().getCarTVarParserRuleCall_0_0()); }
	ruleTVar{ after(grammarAccess.getTVarsAccess().getCarTVarParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TVars__CdrAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarsAccess().getCdrTVarParserRuleCall_1_1_0()); }
	ruleTVar{ after(grammarAccess.getTVarsAccess().getCdrTVarParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TVar__VarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarAccess().getVarVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getTVarAccess().getVarVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TVar__IdAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTVarAccess().getIdTypeIdParserRuleCall_2_0()); }
	ruleTypeId{ after(grammarAccess.getTVarAccess().getIdTypeIdParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetAddition__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAdditionAccess().getRightSetMultiplicationParserRuleCall_1_2_0()); }
	ruleSetMultiplication{ after(grammarAccess.getSetAdditionAccess().getRightSetMultiplicationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetMultiplication__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetMultiplicationAccess().getRightSetPrimaryParserRuleCall_1_2_0()); }
	ruleSetPrimary{ after(grammarAccess.getSetMultiplicationAccess().getRightSetPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateAtom__FidAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAtomAccess().getFidLIDTerminalRuleCall_0_0()); }
	RULE_LID{ after(grammarAccess.getPredicateAtomAccess().getFidLIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredicateAtom__TermsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredicateAtomAccess().getTermsTermsParserRuleCall_1_1_0()); }
	ruleTerms{ after(grammarAccess.getPredicateAtomAccess().getTermsTermsParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicPredicateAtom__FidAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicPredicateAtomAccess().getFidLIDTerminalRuleCall_0_0()); }
	RULE_LID{ after(grammarAccess.getBasicPredicateAtomAccess().getFidLIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicPredicateAtom__TermsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicPredicateAtomAccess().getTermsBasicTermsParserRuleCall_1_1_0()); }
	ruleBasicTerms{ after(grammarAccess.getBasicPredicateAtomAccess().getTermsBasicTermsParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInAtom__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInAtomAccess().getLhsBasicTermParserRuleCall_0_0()); }
	ruleBasicTerm{ after(grammarAccess.getBuiltInAtomAccess().getLhsBasicTermParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInAtom__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInAtomAccess().getOpAtomOpParserRuleCall_1_0()); }
	ruleAtomOp{ after(grammarAccess.getBuiltInAtomAccess().getOpAtomOpParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInAtom__RhsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInAtomAccess().getRhsBasicTermParserRuleCall_2_0()); }
	ruleBasicTerm{ after(grammarAccess.getBuiltInAtomAccess().getRhsBasicTermParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrSentence__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrSentenceAccess().getRightAndSentenceParserRuleCall_1_2_0()); }
	ruleAndSentence{ after(grammarAccess.getOrSentenceAccess().getRightAndSentenceParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndSentence__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndSentenceAccess().getRightPrimarySentenceParserRuleCall_1_2_0()); }
	rulePrimarySentence{ after(grammarAccess.getAndSentenceAccess().getRightPrimarySentenceParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__POrSentence__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPOrSentenceAccess().getRightPAndSentenceParserRuleCall_1_2_0()); }
	rulepAndSentence{ after(grammarAccess.getPOrSentenceAccess().getRightPAndSentenceParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PAndSentence__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPAndSentenceAccess().getRightPPrimarySentenceParserRuleCall_1_2_0()); }
	rulepPrimarySentence{ after(grammarAccess.getPAndSentenceAccess().getRightPPrimarySentenceParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getLhsBoundParserRuleCall_0_0()); }
	ruleBound{ after(grammarAccess.getCardinalityConstraintAccess().getLhsBoundParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__AtomAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getAtomBasicPredicateAtomParserRuleCall_4_0()); }
	ruleBasicPredicateAtom{ after(grammarAccess.getCardinalityConstraintAccess().getAtomBasicPredicateAtomParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityConstraint__RhsAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityConstraintAccess().getRhsBoundParserRuleCall_8_0()); }
	ruleBound{ after(grammarAccess.getCardinalityConstraintAccess().getRhsBoundParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bound__AvAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoundAccess().getAvArithmeticTermParserRuleCall_0()); }
	ruleArithmeticTerm{ after(grammarAccess.getBoundAccess().getAvArithmeticTermParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__HeadAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getHeadHeadParserRuleCall_0_0()); }
	ruleHead{ after(grammarAccess.getRuleAccess().getHeadHeadParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ConditionAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getConditionIfKeyword_1_0_0()); }
(
{ before(grammarAccess.getRuleAccess().getConditionIfKeyword_1_0_0()); }

	'if' 

{ after(grammarAccess.getRuleAccess().getConditionIfKeyword_1_0_0()); }
)

{ after(grammarAccess.getRuleAccess().getConditionIfKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__BodyAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getBodySentenceParserRuleCall_1_1_0()); }
	ruleSentence{ after(grammarAccess.getRuleAccess().getBodySentenceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_LID : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_UID : 'A'..'Z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_NUMERIC_CONSTANT : ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


