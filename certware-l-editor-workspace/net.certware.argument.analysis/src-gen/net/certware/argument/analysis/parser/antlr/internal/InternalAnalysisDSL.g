/*
 * generated by Xtext
 */
grammar InternalAnalysisDSL;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package net.certware.argument.analysis.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.certware.argument.analysis.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import net.certware.argument.analysis.services.AnalysisDSLGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private AnalysisDSLGrammarAccess grammarAccess;
 	
    public InternalAnalysisDSLParser(TokenStream input, AnalysisDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Output";	
   	}
   	
   	@Override
   	protected AnalysisDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	 iv_ruleOutput=ruleOutput 
	 { $current=$iv_ruleOutput.current; } 
	 EOF 
;

// Rule Output
ruleOutput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOutputAccess().getLinesLineParserRuleCall_0_0()); 
	    }
		lv_lines_0_0=ruleLine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputRule());
	        }
       		add(
       			$current, 
       			"lines",
        		lv_lines_0_0, 
        		"net.certware.argument.analysis.AnalysisDSL.Line");
	        afterParserOrEnumRuleCall();
	    }

)
)*(this_SATISFIABLE_1=RULE_SATISFIABLE
    { 
    newLeafNode(this_SATISFIABLE_1, grammarAccess.getOutputAccess().getSATISFIABLETerminalRuleCall_1_0()); 
    }

    |this_UNSATISFIABLE_2=RULE_UNSATISFIABLE
    { 
    newLeafNode(this_UNSATISFIABLE_2, grammarAccess.getOutputAccess().getUNSATISFIABLETerminalRuleCall_1_1()); 
    }
))
;





// Entry rule entryRuleLine
entryRuleLine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLineRule()); }
	 iv_ruleLine=ruleLine 
	 { $current=$iv_ruleLine.current; } 
	 EOF 
;

// Rule Line
ruleLine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLineAccess().getItemsClassicLiteralParserRuleCall_0()); 
	    }
		lv_items_0_0=ruleClassicLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLineRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_0_0, 
        		"net.certware.argument.analysis.AnalysisDSL.ClassicLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleClassicLiteral
entryRuleClassicLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassicLiteralRule()); }
	 iv_ruleClassicLiteral=ruleClassicLiteral 
	 { $current=$iv_ruleClassicLiteral.current; } 
	 EOF 
;

// Rule ClassicLiteral
ruleClassicLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_neg_0_0=	'-' 
    {
        newLeafNode(lv_neg_0_0, grammarAccess.getClassicLiteralAccess().getNegHyphenMinusKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassicLiteralRule());
	        }
       		setWithLastConsumed($current, "neg", lv_neg_0_0, "-");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getClassicLiteralAccess().getAtomAtomParserRuleCall_1_0()); 
	    }
		lv_atom_1_0=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassicLiteralRule());
	        }
       		set(
       			$current, 
       			"atom",
        		lv_atom_1_0, 
        		"net.certware.argument.analysis.AnalysisDSL.Atom");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current; } 
	 EOF 
;

// Rule Atom
ruleAtom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getNamePREDICATE_NAMEParserRuleCall_0_0()); 
	    }
		lv_name_0_0=rulePREDICATE_NAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"net.certware.argument.analysis.AnalysisDSL.PREDICATE_NAME");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomAccess().getTermsTermsParserRuleCall_1_1_0()); 
	    }
		lv_terms_2_0=ruleTerms		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomRule());
	        }
       		set(
       			$current, 
       			"terms",
        		lv_terms_2_0, 
        		"net.certware.argument.analysis.AnalysisDSL.Terms");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





// Entry rule entryRulePREDICATE_NAME
entryRulePREDICATE_NAME returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPREDICATE_NAMERule()); } 
	 iv_rulePREDICATE_NAME=rulePREDICATE_NAME 
	 { $current=$iv_rulePREDICATE_NAME.current.getText(); }  
	 EOF 
;

// Rule PREDICATE_NAME
rulePREDICATE_NAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getPREDICATE_NAMEAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleTerms
entryRuleTerms returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermsRule()); }
	 iv_ruleTerms=ruleTerms 
	 { $current=$iv_ruleTerms.current; } 
	 EOF 
;

// Rule Terms
ruleTerms returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTermsAccess().getCarTermParserRuleCall_0_0()); 
	    }
		lv_car_0_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermsRule());
	        }
       		set(
       			$current, 
       			"car",
        		lv_car_0_0, 
        		"net.certware.argument.analysis.AnalysisDSL.Term");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTermsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermsAccess().getCdrTermParserRuleCall_1_1_0()); 
	    }
		lv_cdr_2_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermsRule());
	        }
       		add(
       			$current, 
       			"cdr",
        		lv_cdr_2_0, 
        		"net.certware.argument.analysis.AnalysisDSL.Term");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getCsCONSTANT_SYMBOLParserRuleCall_0_0()); 
	    }
		lv_cs_0_0=ruleCONSTANT_SYMBOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"cs",
        		lv_cs_0_0, 
        		"net.certware.argument.analysis.AnalysisDSL.CONSTANT_SYMBOL");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		lv_sign_1_0=	'-' 
    {
        newLeafNode(lv_sign_1_0, grammarAccess.getTermAccess().getSignHyphenMinusKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed($current, "sign", lv_sign_1_0, "-");
	    }

)
)?(
(
		lv_n_2_0=RULE_NUMBER
		{
			newLeafNode(lv_n_2_0, grammarAccess.getTermAccess().getNNUMBERTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"n",
        		lv_n_2_0, 
        		"net.certware.argument.analysis.AnalysisDSL.NUMBER");
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getFsFUNCTIONAL_SYMBOLParserRuleCall_2_0_0()); 
	    }
		lv_fs_3_0=ruleFUNCTIONAL_SYMBOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"fs",
        		lv_fs_3_0, 
        		"net.certware.argument.analysis.AnalysisDSL.FUNCTIONAL_SYMBOL");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTermAccess().getLeftParenthesisKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getTermsTermsParserRuleCall_2_2_0()); 
	    }
		lv_terms_5_0=ruleTerms		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"terms",
        		lv_terms_5_0, 
        		"net.certware.argument.analysis.AnalysisDSL.Terms");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTermAccess().getRightParenthesisKeyword_2_3());
    }
))
;





// Entry rule entryRuleCONSTANT_SYMBOL
entryRuleCONSTANT_SYMBOL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCONSTANT_SYMBOLRule()); } 
	 iv_ruleCONSTANT_SYMBOL=ruleCONSTANT_SYMBOL 
	 { $current=$iv_ruleCONSTANT_SYMBOL.current.getText(); }  
	 EOF 
;

// Rule CONSTANT_SYMBOL
ruleCONSTANT_SYMBOL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getCONSTANT_SYMBOLAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleFUNCTIONAL_SYMBOL
entryRuleFUNCTIONAL_SYMBOL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFUNCTIONAL_SYMBOLRule()); } 
	 iv_ruleFUNCTIONAL_SYMBOL=ruleFUNCTIONAL_SYMBOL 
	 { $current=$iv_ruleFUNCTIONAL_SYMBOL.current.getText(); }  
	 EOF 
;

// Rule FUNCTIONAL_SYMBOL
ruleFUNCTIONAL_SYMBOL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_IDENTIFIER_0=RULE_IDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
    newLeafNode(this_IDENTIFIER_0, grammarAccess.getFUNCTIONAL_SYMBOLAccess().getIDENTIFIERTerminalRuleCall()); 
    }

    ;





RULE_NUMBER : ('0'|'1'..'9' ('0'..'9')*);

RULE_IDENTIFIER : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_SATISFIABLE : 'SATISFIABLE';

RULE_UNSATISFIABLE : 'UNSATISFIABLE';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


